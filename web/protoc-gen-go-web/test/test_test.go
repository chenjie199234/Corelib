package test

import (
	"testing"
)

func Test_Test(t *testing.T) {
	// tdm := &TestData{
	// 	I32:      -32,
	// 	Ri32:     []int32{-32, -32},
	// 	Ui32:     32,
	// 	Rui32:    []uint32{32, 32},
	// 	I64:      -64,
	// 	Ri64:     []int64{-64, -64},
	// 	Ui64:     64,
	// 	Rui64:    []uint64{64, 64},
	// 	Bs:       []byte("bytes"),
	// 	Rbs:      [][]byte{[]byte("bytes"), []byte("bytes")},
	// 	Ss:       "string",
	// 	Rss:      []string{"string", "string"},
	// 	F:        1.1,
	// 	Rf:       []float32{1.1, 1.1},
	// 	D:        2.2,
	// 	Rd:       []float64{2.2, 2.2},
	// 	E:        TestEnum_ENUMA,
	// 	Re:       []TestEnum{TestEnum_ENUMA, TestEnum_ENUMB},
	// 	Mi32I32:  map[int32]int32{-32: -32},
	// 	Mi32Ui32: map[int32]uint32{-32: 32},
	// 	Mi32I64:  map[int32]int64{-32: -64},
	// 	Mi32Ui64: map[int32]uint64{-32: 64},
	// 	Mi32Bs:   map[int32][]byte{-32: []byte("bytes")},
	// 	Mi32Ss:   map[int32]string{-32: "string"},
	// 	Mi32F:    map[int32]float32{-32: 1.1},
	// 	Mi32D:    map[int32]float64{-32: 2.2},
	// 	Mi32E:    map[int32]TestEnum{-32: TestEnum_ENUMA},
	//
	// 	Mui32I32:  map[uint32]int32{32: -32},
	// 	Mui32Ui32: map[uint32]uint32{32: 32},
	// 	Mui32I64:  map[uint32]int64{32: -64},
	// 	Mui32Ui64: map[uint32]uint64{32: 64},
	// 	Mui32Bs:   map[uint32][]byte{32: []byte("bytes")},
	// 	Mui32Ss:   map[uint32]string{32: "string"},
	// 	Mui32F:    map[uint32]float32{32: 1.1},
	// 	Mui32D:    map[uint32]float64{32: 2.2},
	// 	Mui32E:    map[uint32]TestEnum{32: TestEnum_ENUMA},
	//
	// 	Mi64I32:  map[int64]int32{-64: -32},
	// 	Mi64Ui32: map[int64]uint32{-64: 32},
	// 	Mi64I64:  map[int64]int64{-64: -64},
	// 	Mi64Ui64: map[int64]uint64{-64: 64},
	// 	Mi64Bs:   map[int64][]byte{-64: []byte("bytes")},
	// 	Mi64Ss:   map[int64]string{-64: "string"},
	// 	Mi64F:    map[int64]float32{-64: 1.1},
	// 	Mi64D:    map[int64]float64{-64: 2.2},
	// 	Mi64E:    map[int64]TestEnum{-64: TestEnum_ENUMA},
	//
	// 	Mui64I32:  map[uint64]int32{64: -32},
	// 	Mui64Ui32: map[uint64]uint32{64: 32},
	// 	Mui64I64:  map[uint64]int64{64: -64},
	// 	Mui64Ui64: map[uint64]uint64{64: 64},
	// 	Mui64Bs:   map[uint64][]byte{64: []byte("bytes")},
	// 	Mui64Ss:   map[uint64]string{64: "string"},
	// 	Mui64F:    map[uint64]float32{64: 1.1},
	// 	Mui64D:    map[uint64]float64{64: 2.2},
	// 	Mui64E:    map[uint64]TestEnum{64: TestEnum_ENUMA},
	//
	// 	MssI32:  map[string]int32{"string": -32},
	// 	MssUi32: map[string]uint32{"string": 32},
	// 	MssI64:  map[string]int64{"string": -64},
	// 	MssUi64: map[string]uint64{"string": 64},
	// 	MssBs:   map[string][]byte{"string": []byte("bytes")},
	// 	MssSs:   map[string]string{"string": "string"},
	// 	MssF:    map[string]float32{"string": 1.1},
	// 	MssD:    map[string]float64{"string": 2.2},
	// 	MssE:    map[string]TestEnum{"string": TestEnum_ENUMA},
	// }

	// td := &TestData{
	// 	// I32:   -32,
	// 	// Ri32:  []int32{-32, -32},
	// 	// Ui32:  32,
	// 	// Rui32: []uint32{32, 32},
	// 	// I64:   -64,
	// 	// Ri64:  []int64{-64, -64},
	// 	// Ui64:  64,
	// 	// Rui64: []uint64{64, 64},
	// 	// Bs:    []byte("bytes"),
	// 	// Rbs:   [][]byte{[]byte("bytes"), []byte("bytes")},
	// 	// Ss:    "string",
	// 	// Rss:   []string{"string", "string"},
	// 	// F:     1.1,
	// 	// Rf:    []float32{1.1, 1.1},
	// 	D: 22112397129320930123129312.2,
	// 	// Rd:    []float64{2.2, 2.2},
	// 	// E:     TestEnum_ENUMA,
	// 	// Re:    []TestEnum{TestEnum_ENUMA, TestEnum_ENUMB},
	// 	// M:     tdm,
	// 	// Rm:    []*TestData{tdm, tdm},
	//
	// 	// Mi32I32:  map[int32]int32{-32: -32, -33: -33},
	// 	// Mi32Ui32: map[int32]uint32{-32: 32},
	// 	// Mi32I64:  map[int32]int64{-32: -64},
	// 	// Mi32Ui64: map[int32]uint64{-32: 64},
	// 	// Mi32Bs:   map[int32][]byte{-32: []byte("bytes")},
	// 	// Mi32Ss:   map[int32]string{-32: "string"},
	// 	// Mi32F:    map[int32]float32{-32: 1.1},
	// 	// Mi32D:    map[int32]float64{-32: 2.2},
	// 	// Mi32E:    map[int32]TestEnum{-32: TestEnum_ENUMA},
	// 	// Mi32M:    map[int32]*TestData{-32: tdm},
	//
	// 	// Mui32I32:  map[uint32]int32{32: -32},
	// 	// Mui32Ui32: map[uint32]uint32{32: 32},
	// 	// Mui32I64:  map[uint32]int64{32: -64},
	// 	// Mui32Ui64: map[uint32]uint64{32: 64},
	// 	// Mui32Bs:   map[uint32][]byte{32: []byte("bytes")},
	// 	// Mui32Ss:   map[uint32]string{32: "string"},
	// 	// Mui32F:    map[uint32]float32{32: 1.1},
	// 	// Mui32D:    map[uint32]float64{32: 2.2},
	// 	// Mui32E:    map[uint32]TestEnum{32: TestEnum_ENUMA},
	// 	// Mui32M:    map[uint32]*TestData{32: tdm},
	// 	//
	// 	// Mi64I32:  map[int64]int32{-64: -32},
	// 	// Mi64Ui32: map[int64]uint32{-64: 32},
	// 	// Mi64I64:  map[int64]int64{-64: -64},
	// 	// Mi64Ui64: map[int64]uint64{-64: 64},
	// 	// Mi64Bs:   map[int64][]byte{-64: []byte("bytes")},
	// 	// Mi64Ss:   map[int64]string{-64: "string"},
	// 	// Mi64F:    map[int64]float32{-64: 1.1},
	// 	// Mi64D:    map[int64]float64{-64: 2.2},
	// 	// Mi64E:    map[int64]TestEnum{-64: TestEnum_ENUMA},
	// 	// Mi64M:    map[int64]*TestData{-64: tdm},
	// 	//
	// 	// Mui64I32:  map[uint64]int32{64: -32},
	// 	// Mui64Ui32: map[uint64]uint32{64: 32},
	// 	// Mui64I64:  map[uint64]int64{64: -64},
	// 	// Mui64Ui64: map[uint64]uint64{64: 64},
	// 	// Mui64Bs:   map[uint64][]byte{64: []byte("bytes")},
	// 	// Mui64Ss:   map[uint64]string{64: "string"},
	// 	// Mui64F:    map[uint64]float32{64: 1.1},
	// 	// Mui64D:    map[uint64]float64{64: 2.2},
	// 	// Mui64E:    map[uint64]TestEnum{64: TestEnum_ENUMA},
	// 	// Mui64M:    map[uint64]*TestData{64: tdm},
	// 	//
	// 	// MssI32:  map[string]int32{"string": -32},
	// 	// MssUi32: map[string]uint32{"string": 32},
	// 	// MssI64:  map[string]int64{"string": -64},
	// 	// MssUi64: map[string]uint64{"string": 64},
	// 	// MssBs:   map[string][]byte{"string": []byte("bytes")},
	// 	// MssSs:   map[string]string{"string": "string"},
	// 	// MssF:    map[string]float32{"string": 1.1},
	// 	// MssD:    map[string]float64{"string": 2.2},
	// 	// MssE:    map[string]TestEnum{"string": TestEnum_ENUMA},
	// 	// MssM:    map[string]*TestData{"string": tdm},
	// }
}
