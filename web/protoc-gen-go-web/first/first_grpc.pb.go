// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package first

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	second "protoc-gen-go-web/second"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	Kiss(ctx context.Context, in *second.KissReq, opts ...grpc.CallOption) (*second.KissResp, error)
	Bye(ctx context.Context, in *second.ByeReq, opts ...grpc.CallOption) (*second.ByeResp, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

var testHelloStreamDesc = &grpc.StreamDesc{
	StreamName: "hello",
}

func (c *testClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/first.test/hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var testKissStreamDesc = &grpc.StreamDesc{
	StreamName: "kiss",
}

func (c *testClient) Kiss(ctx context.Context, in *second.KissReq, opts ...grpc.CallOption) (*second.KissResp, error) {
	out := new(second.KissResp)
	err := c.cc.Invoke(ctx, "/first.test/kiss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var testByeStreamDesc = &grpc.StreamDesc{
	StreamName: "bye",
}

func (c *testClient) Bye(ctx context.Context, in *second.ByeReq, opts ...grpc.CallOption) (*second.ByeResp, error) {
	out := new(second.ByeResp)
	err := c.cc.Invoke(ctx, "/first.test/bye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestService is the service API for Test service.
// Fields should be assigned to their respective handler implementations only before
// RegisterTestService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type TestService struct {
	Hello func(context.Context, *HelloReq) (*HelloResp, error)
	Kiss  func(context.Context, *second.KissReq) (*second.KissResp, error)
	Bye   func(context.Context, *second.ByeReq) (*second.ByeResp, error)
}

func (s *TestService) hello(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/first.test/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TestService) kiss(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(second.KissReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Kiss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/first.test/Kiss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Kiss(ctx, req.(*second.KissReq))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TestService) bye(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(second.ByeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Bye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/first.test/Bye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Bye(ctx, req.(*second.ByeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterTestService registers a service implementation with a gRPC server.
func RegisterTestService(s grpc.ServiceRegistrar, srv *TestService) {
	srvCopy := *srv
	if srvCopy.Hello == nil {
		srvCopy.Hello = func(context.Context, *HelloReq) (*HelloResp, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
		}
	}
	if srvCopy.Kiss == nil {
		srvCopy.Kiss = func(context.Context, *second.KissReq) (*second.KissResp, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Kiss not implemented")
		}
	}
	if srvCopy.Bye == nil {
		srvCopy.Bye = func(context.Context, *second.ByeReq) (*second.ByeResp, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Bye not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "first.test",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "hello",
				Handler:    srvCopy.hello,
			},
			{
				MethodName: "kiss",
				Handler:    srvCopy.kiss,
			},
			{
				MethodName: "bye",
				Handler:    srvCopy.bye,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "protoc-gen-go-web/first/first.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewTestService creates a new TestService containing the
// implemented methods of the Test service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewTestService(s interface{}) *TestService {
	ns := &TestService{}
	if h, ok := s.(interface {
		Hello(context.Context, *HelloReq) (*HelloResp, error)
	}); ok {
		ns.Hello = h.Hello
	}
	if h, ok := s.(interface {
		Kiss(context.Context, *second.KissReq) (*second.KissResp, error)
	}); ok {
		ns.Kiss = h.Kiss
	}
	if h, ok := s.(interface {
		Bye(context.Context, *second.ByeReq) (*second.ByeResp, error)
	}); ok {
		ns.Bye = h.Bye
	}
	return ns
}

// UnstableTestService is the service API for Test service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableTestService interface {
	Hello(context.Context, *HelloReq) (*HelloResp, error)
	Kiss(context.Context, *second.KissReq) (*second.KissResp, error)
	Bye(context.Context, *second.ByeReq) (*second.ByeResp, error)
}
