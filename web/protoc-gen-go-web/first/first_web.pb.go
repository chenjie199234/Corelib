// Code generated by protoc-gen-go-web. DO NOT EDIT.

package first

import (
	//std
	"encoding/json"
	"net/http"
	"net/url"
	"strings"

	//third
	"github.com/chenjie199234/Corelib/web"
	"google.golang.org/protobuf/proto"

	//project
	"protoc-gen-go-web/second"
)

type WebTestService struct {
	RegisterMidware func() map[string][]web.OutsideHandler
	Hello           func(*web.Context, *HelloReq) (*HelloResp, error)
	Kiss            func(*web.Context, *second.KissReq) (*second.KissResp, error)
	Bye             func(*web.Context, *second.ByeReq) (*second.ByeResp, error)
}

func (s *WebTestService) hello(ctx *web.Context) {
	req := &HelloReq{}
	switch ctx.GetContentType() {
	case "":
		fallthrough
	case "application/x-www-form-urlencoded":
		encoded := false
		if data := ctx.GetForm("encode"); data == "1" {
			encoded = true
		}
		if data := ctx.GetForm("json"); data != "" {
			var e error
			if encoded {
				if data, e = url.QueryUnescape(data); e != nil {
					ctx.WriteString(http.StatusBadRequest, "encoded request data format error:"+e.Error())
					return
				}
			}
			if e = json.Unmarshal(web.Str2byte(data), req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode json request data error:"+e.Error())
				return
			}
		} else if data := ctx.GetForm("proto"); data != "" {
			var e error
			if encoded {
				if data, e = url.QueryUnescape(data); e != nil {
					ctx.WriteString(http.StatusBadRequest, "encoded request data format error:"+e.Error())
					return
				}
			}
			if e = proto.Unmarshal(web.Str2byte(data), req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode proto request data error:"+e.Error())
				return
			}
		}
	case "application/json":
		if body, _ := ctx.GetBody(); len(body) > 0 {
			if e := json.Unmarshal(body, req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode json request data error:"+e.Error())
				return
			}
		}
	case "application/x-protobuf":
		if body, _ := ctx.GetBody(); len(body) > 0 {
			if e := proto.Unmarshal(body, req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode proto request data error:"+e.Error())
				return
			}
		}
	default:
		ctx.WriteString(http.StatusBadRequest, "unknown Content-Type:"+ctx.GetContentType())
		return
	}
	resp, e := s.Hello(ctx, req)
	if e != nil {
		ctx.WriteString(http.StatusInternalServerError, e.Error())
		return
	}
	if strings.Contains(ctx.GetAcceptType(), "application/x-protobuf") {
		data, e := proto.Marshal(resp)
		if e != nil {
			ctx.WriteString(http.StatusInternalServerError, "encode proto response data error:"+e.Error())
			return
		}
		ctx.Write(http.StatusOK, data)
	} else {
		data, e := json.Marshal(resp)
		if e != nil {
			ctx.WriteString(http.StatusInternalServerError, "encode json response data error:"+e.Error())
			return
		}
		ctx.Write(http.StatusOK, data)
	}
}
func (s *WebTestService) kiss(ctx *web.Context) {
	req := &second.KissReq{}
	switch ctx.GetContentType() {
	case "":
		fallthrough
	case "application/x-www-form-urlencoded":
		encoded := false
		if data := ctx.GetForm("encode"); data == "1" {
			encoded = true
		}
		if data := ctx.GetForm("json"); data != "" {
			var e error
			if encoded {
				if data, e = url.QueryUnescape(data); e != nil {
					ctx.WriteString(http.StatusBadRequest, "encoded request data format error:"+e.Error())
					return
				}
			}
			if e = json.Unmarshal(web.Str2byte(data), req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode json request data error:"+e.Error())
				return
			}
		} else if data := ctx.GetForm("proto"); data != "" {
			var e error
			if encoded {
				if data, e = url.QueryUnescape(data); e != nil {
					ctx.WriteString(http.StatusBadRequest, "encoded request data format error:"+e.Error())
					return
				}
			}
			if e = proto.Unmarshal(web.Str2byte(data), req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode proto request data error:"+e.Error())
				return
			}
		}
	case "application/json":
		if body, _ := ctx.GetBody(); len(body) > 0 {
			if e := json.Unmarshal(body, req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode json request data error:"+e.Error())
				return
			}
		}
	case "application/x-protobuf":
		if body, _ := ctx.GetBody(); len(body) > 0 {
			if e := proto.Unmarshal(body, req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode proto request data error:"+e.Error())
				return
			}
		}
	default:
		ctx.WriteString(http.StatusBadRequest, "unknown Content-Type:"+ctx.GetContentType())
		return
	}
	resp, e := s.Kiss(ctx, req)
	if e != nil {
		ctx.WriteString(http.StatusInternalServerError, e.Error())
		return
	}
	if strings.Contains(ctx.GetAcceptType(), "application/x-protobuf") {
		data, e := proto.Marshal(resp)
		if e != nil {
			ctx.WriteString(http.StatusInternalServerError, "encode proto response data error:"+e.Error())
			return
		}
		ctx.Write(http.StatusOK, data)
	} else {
		data, e := json.Marshal(resp)
		if e != nil {
			ctx.WriteString(http.StatusInternalServerError, "encode json response data error:"+e.Error())
			return
		}
		ctx.Write(http.StatusOK, data)
	}
}
func (s *WebTestService) bye(ctx *web.Context) {
	req := &second.ByeReq{}
	switch ctx.GetContentType() {
	case "":
		fallthrough
	case "application/x-www-form-urlencoded":
		encoded := false
		if data := ctx.GetForm("encode"); data == "1" {
			encoded = true
		}
		if data := ctx.GetForm("json"); data != "" {
			var e error
			if encoded {
				if data, e = url.QueryUnescape(data); e != nil {
					ctx.WriteString(http.StatusBadRequest, "encoded request data format error:"+e.Error())
					return
				}
			}
			if e = json.Unmarshal(web.Str2byte(data), req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode json request data error:"+e.Error())
				return
			}
		} else if data := ctx.GetForm("proto"); data != "" {
			var e error
			if encoded {
				if data, e = url.QueryUnescape(data); e != nil {
					ctx.WriteString(http.StatusBadRequest, "encoded request data format error:"+e.Error())
					return
				}
			}
			if e = proto.Unmarshal(web.Str2byte(data), req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode proto request data error:"+e.Error())
				return
			}
		}
	case "application/json":
		if body, _ := ctx.GetBody(); len(body) > 0 {
			if e := json.Unmarshal(body, req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode json request data error:"+e.Error())
				return
			}
		}
	case "application/x-protobuf":
		if body, _ := ctx.GetBody(); len(body) > 0 {
			if e := proto.Unmarshal(body, req); e != nil {
				ctx.WriteString(http.StatusBadRequest, "decode proto request data error:"+e.Error())
				return
			}
		}
	default:
		ctx.WriteString(http.StatusBadRequest, "unknown Content-Type:"+ctx.GetContentType())
		return
	}
	resp, e := s.Bye(ctx, req)
	if e != nil {
		ctx.WriteString(http.StatusInternalServerError, e.Error())
		return
	}
	if strings.Contains(ctx.GetAcceptType(), "application/x-protobuf") {
		data, e := proto.Marshal(resp)
		if e != nil {
			ctx.WriteString(http.StatusInternalServerError, "encode proto response data error:"+e.Error())
			return
		}
		ctx.Write(http.StatusOK, data)
	} else {
		data, e := json.Marshal(resp)
		if e != nil {
			ctx.WriteString(http.StatusInternalServerError, "encode json response data error:"+e.Error())
			return
		}
		ctx.Write(http.StatusOK, data)
	}
}

var PathWebTestHello = "/Test/Hello"
var PathWebTestKiss = "/Test/Kiss"
var PathWebTestBye = "/Test/Bye"

func RegisterWebTestService(engine *web.Web, instance *WebTestService) {
	var pathmids map[string][]web.OutsideHandler
	if instance.RegisterMidware != nil {
		pathmids = instance.RegisterMidware()
	}
	//Hello
	if instance.Hello == nil {
		engine.GET(PathWebTestHello, func(ctx *web.Context) { ctx.WriteString(http.StatusNotFound, "method Hello not implemented") })
	} else if mids, ok := pathmids[PathWebTestHello]; ok && len(mids) > 0 {
		engine.GET(PathWebTestHello, append(mids, instance.hello)...)
	} else {
		engine.GET(PathWebTestHello, instance.hello)
	}
	//Kiss
	if instance.Kiss == nil {
		engine.POST(PathWebTestKiss, func(ctx *web.Context) { ctx.WriteString(http.StatusNotFound, "method Kiss not implemented") })
	} else if mids, ok := pathmids[PathWebTestKiss]; ok && len(mids) > 0 {
		engine.POST(PathWebTestKiss, append(mids, instance.kiss)...)
	} else {
		engine.POST(PathWebTestKiss, instance.kiss)
	}
	//Bye
	if instance.Bye == nil {
		engine.DELETE(PathWebTestBye, func(ctx *web.Context) { ctx.WriteString(http.StatusNotFound, "method Bye not implemented") })
	} else if mids, ok := pathmids[PathWebTestBye]; ok && len(mids) > 0 {
		engine.DELETE(PathWebTestBye, append(mids, instance.bye)...)
	} else {
		engine.DELETE(PathWebTestBye, instance.bye)
	}
}
