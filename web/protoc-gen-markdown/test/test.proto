//protoc -I ../../../pbex -I . --go_out=paths=source_relative:. *.proto
syntax="proto3";
package test;
option go_package="github.com/chenjie199234/Corelib/web/protoc-gen-go-web/test;test";
import "pbex.proto";
service test {
	rpc hello(helloreq)returns(helloresp){
		option (pbex.method)="get";
		option (pbex.web_midwares)="user";
		option (pbex.web_midwares)="limit";
	}
	rpc world(worldreq)returns(worldresp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="user";
		option (pbex.web_midwares)="limit";
	}
}
enum TestEnum {
	ENUMA=0;
	ENUMB=1;
}
message helloreq{
	bool bl = 1;
	optional bool blo = 2;
	repeated bool bls = 3;
	int32 i32=4[(pbex.int_in)=1];
	optional int32 i32o=5;
	repeated int32 ri32=6[(pbex.int_not_in)=1];
	uint32 ui32=7[(pbex.uint_in)=1];
	optional uint32 ui32o=8;
	repeated uint32 rui32=9[(pbex.map_repeated_len_gt)=2,(pbex.uint_not_in)=1];
	int64 i64=10;
	optional int64 i64o=11;
	repeated int64 ri64=12;
	uint64 ui64=13;
	optional uint64 ui64o=14;
	repeated uint64 rui64=15;
	bytes bs=16;
	optional bytes bso=17;
	repeated bytes rbs=18;
	string ss=19;
	optional string sso=20;
	repeated string rss=21[(pbex.string_bytes_reg_match)="abc*"];
	float f=22;
	optional float fo=23;
	repeated float rf=24;
	double d=25;
	optional double do=26;
	repeated double rd=27;
	TestEnum e=28;
	optional TestEnum eo=29;
	repeated TestEnum re=30;
}
message helloresp{

}
message data{

}
message worldreq{
	bool bl = 1;
	optional bool blo = 2;
	repeated bool bls = 3;
	int32 i32=4[(pbex.int_in)=1];
	optional int32 i32o=5;
	repeated int32 ri32=6[(pbex.int_not_in)=1];
	uint32 ui32=7[(pbex.uint_in)=1];
	optional uint32 ui32o=8;
	repeated uint32 rui32=9[(pbex.map_repeated_len_gt)=2,(pbex.uint_not_in)=1];
	int64 i64=10;
	optional int64 i64o=11;
	repeated int64 ri64=12;
	uint64 ui64=13;
	optional uint64 ui64o=14;
	repeated uint64 rui64=15;
	bytes bs=16;
	optional bytes bso=17;
	repeated bytes rbs=18;
	string ss=19;
	optional string sso=20;
	repeated string rss=21[(pbex.string_bytes_reg_match)="abc*"];
	float f=22;
	optional float fo=23;
	repeated float rf=24;
	double d=25;
	optional double do=26;
	repeated double rd=27;
	TestEnum e=28;
	optional TestEnum eo=29;
	repeated TestEnum re=30;
	data m=31[(pbex.message_not_nil)=true];
	optional data mo=32;
	repeated data rm=33[(pbex.message_not_nil)=true];

	map<int32,int32> mi32_i32=34;
	map<int32,uint32> mi32_ui32=35;
	map<int32,int64> mi32_i64=36;
	map<int32,uint64> mi32_ui64=37;
	map<int32,bytes> mi32_bs=38;
	map<int32,string> mi32_ss=39;
	map<int32,float> mi32_f=40;
	map<int32,double> mi32_d=41;
	map<int32,TestEnum> mi32_e=42;
	map<int32,data> mi32_m=43;

	map<uint32,int32> mui32_i32=44;
	map<uint32,uint32> mui32_ui32=45;
	map<uint32,int64> mui32_i64=46;
	map<uint32,uint64> mui32_ui64=47;
	map<uint32,bytes> mui32_bs=48;
	map<uint32,string> mui32_ss=49[(pbex.map_value_string_bytes_reg_match)="xyz*"];
	map<uint32,float> mui32_f=50;
	map<uint32,double> mui32_d=51;
	map<uint32,TestEnum> mui32_e=52;
	map<uint32,data> mui32_m=53;

	map<int64,int32> mi64_i32=54;
	map<int64,uint32> mi64_ui32=55;
	map<int64,int64> mi64_i64=56;
	map<int64,uint64> mi64_ui64=57;
	map<int64,bytes> mi64_bs=58;
	map<int64,string> mi64_ss=59;
	map<int64,float> mi64_f=60;
	map<int64,double> mi64_d=61;
	map<int64,TestEnum> mi64_e=62;
	map<int64,data> mi64_m=63;

	map<uint64,int32> mui64_i32=64;
	map<uint64,uint32> mui64_ui32=65;
	map<uint64,int64> mui64_i64=66;
	map<uint64,uint64> mui64_ui64=67;
	map<uint64,bytes> mui64_bs=68;
	map<uint64,string> mui64_ss=69;
	map<uint64,float> mui64_f=70;
	map<uint64,double> mui64_d=71;
	map<uint64,TestEnum> mui64_e=72;
	map<uint64,data> mui64_m=73;

	map<string,int32> mss_i32=74[(pbex.map_key_string_reg_match)="key*"];
	map<string,uint32> mss_ui32=75;
	map<string,int64> mss_i64=76;
	map<string,uint64> mss_ui64=77;
	map<string,bytes> mss_bs=78;
	map<string,string> mss_ss=79;
	map<string,float> mss_f=80;
	map<string,double> mss_d=81;
	map<string,TestEnum> mss_e=82;
	map<string,data> mss_m=83;
}
message worldresp{

}
