//protoc -I ../../../pbex -I . --go_out=paths=source_relative:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: test.proto

package test

import (
	_ "github.com/chenjie199234/Corelib/pbex"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TE int32

const (
	TE_A TE = 0
	TE_B TE = 3
)

// Enum value maps for TE.
var (
	TE_name = map[int32]string{
		0: "A",
		3: "B",
	}
	TE_value = map[string]int32{
		"A": 0,
		"B": 3,
	}
)

func (x TE) Enum() *TE {
	p := new(TE)
	*p = x
	return p
}

func (x TE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TE) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (TE) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x TE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TE.Descriptor instead.
func (TE) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type HelloReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I32  int32              `protobuf:"varint,1,opt,name=i32,proto3" json:"i32,omitempty"`
	Ri32 []int32            `protobuf:"varint,2,rep,packed,name=ri32,proto3" json:"ri32,omitempty"`
	U32  uint32             `protobuf:"varint,3,opt,name=u32,proto3" json:"u32,omitempty"`
	Ru32 []uint32           `protobuf:"varint,4,rep,packed,name=ru32,proto3" json:"ru32,omitempty"`
	I64  int64              `protobuf:"varint,5,opt,name=i64,proto3" json:"i64,omitempty"`
	Ri64 []int64            `protobuf:"varint,6,rep,packed,name=ri64,proto3" json:"ri64,omitempty"`
	U64  uint64             `protobuf:"varint,7,opt,name=u64,proto3" json:"u64,omitempty"`
	Ru64 []uint64           `protobuf:"varint,8,rep,packed,name=ru64,proto3" json:"ru64,omitempty"`
	B    bool               `protobuf:"varint,9,opt,name=b,proto3" json:"b,omitempty"`
	Rb   []bool             `protobuf:"varint,10,rep,packed,name=rb,proto3" json:"rb,omitempty"`
	E    TE                 `protobuf:"varint,11,opt,name=e,proto3,enum=test.TE" json:"e,omitempty"`
	Es   []TE               `protobuf:"varint,12,rep,packed,name=es,proto3,enum=test.TE" json:"es,omitempty"`
	S    string             `protobuf:"bytes,13,opt,name=s,proto3" json:"s,omitempty"`
	Rs   []string           `protobuf:"bytes,14,rep,name=rs,proto3" json:"rs,omitempty"`
	Bs   []byte             `protobuf:"bytes,15,opt,name=bs,proto3" json:"bs,omitempty"`
	Rbs  [][]byte           `protobuf:"bytes,16,rep,name=rbs,proto3" json:"rbs,omitempty"`
	F    float32            `protobuf:"fixed32,17,opt,name=f,proto3" json:"f,omitempty"`
	Rf   []float32          `protobuf:"fixed32,18,rep,packed,name=rf,proto3" json:"rf,omitempty"`
	D    float64            `protobuf:"fixed64,19,opt,name=d,proto3" json:"d,omitempty"`
	Rd   []float64          `protobuf:"fixed64,20,rep,packed,name=rd,proto3" json:"rd,omitempty"`
	Msg  *Data              `protobuf:"bytes,21,opt,name=msg,proto3" json:"msg,omitempty"`
	Rmsg []*Data            `protobuf:"bytes,22,rep,name=rmsg,proto3" json:"rmsg,omitempty"`
	Mi32 map[uint64]int32   `protobuf:"bytes,23,rep,name=mi32,proto3" json:"mi32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mu32 map[uint64]uint32  `protobuf:"bytes,24,rep,name=mu32,proto3" json:"mu32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi64 map[uint64]int64   `protobuf:"bytes,25,rep,name=mi64,proto3" json:"mi64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mu64 map[uint64]uint64  `protobuf:"bytes,26,rep,name=mu64,proto3" json:"mu64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mb   map[uint64]bool    `protobuf:"bytes,27,rep,name=mb,proto3" json:"mb,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Me   map[uint64]TE      `protobuf:"bytes,28,rep,name=me,proto3" json:"me,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.TE"`
	Ms   map[uint64]string  `protobuf:"bytes,29,rep,name=ms,proto3" json:"ms,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mbs  map[uint64][]byte  `protobuf:"bytes,30,rep,name=mbs,proto3" json:"mbs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mf   map[uint64]float32 `protobuf:"bytes,31,rep,name=mf,proto3" json:"mf,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Md   map[uint64]float64 `protobuf:"bytes,32,rep,name=md,proto3" json:"md,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Mmsg map[uint64]*Data   `protobuf:"bytes,33,rep,name=mmsg,proto3" json:"mmsg,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Union:
	//	*HelloReq_Oi32
	//	*HelloReq_Ou32
	//	*HelloReq_Oi64
	//	*HelloReq_Ou64
	//	*HelloReq_Of
	//	*HelloReq_Od
	//	*HelloReq_Os
	//	*HelloReq_Obs
	//	*HelloReq_Oe
	//	*HelloReq_Ob
	//	*HelloReq_Omsg
	Union isHelloReq_Union `protobuf_oneof:"union"`
}

func (x *HelloReq) Reset() {
	*x = HelloReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReq) ProtoMessage() {}

func (x *HelloReq) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReq.ProtoReflect.Descriptor instead.
func (*HelloReq) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *HelloReq) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *HelloReq) GetRi32() []int32 {
	if x != nil {
		return x.Ri32
	}
	return nil
}

func (x *HelloReq) GetU32() uint32 {
	if x != nil {
		return x.U32
	}
	return 0
}

func (x *HelloReq) GetRu32() []uint32 {
	if x != nil {
		return x.Ru32
	}
	return nil
}

func (x *HelloReq) GetI64() int64 {
	if x != nil {
		return x.I64
	}
	return 0
}

func (x *HelloReq) GetRi64() []int64 {
	if x != nil {
		return x.Ri64
	}
	return nil
}

func (x *HelloReq) GetU64() uint64 {
	if x != nil {
		return x.U64
	}
	return 0
}

func (x *HelloReq) GetRu64() []uint64 {
	if x != nil {
		return x.Ru64
	}
	return nil
}

func (x *HelloReq) GetB() bool {
	if x != nil {
		return x.B
	}
	return false
}

func (x *HelloReq) GetRb() []bool {
	if x != nil {
		return x.Rb
	}
	return nil
}

func (x *HelloReq) GetE() TE {
	if x != nil {
		return x.E
	}
	return TE_A
}

func (x *HelloReq) GetEs() []TE {
	if x != nil {
		return x.Es
	}
	return nil
}

func (x *HelloReq) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *HelloReq) GetRs() []string {
	if x != nil {
		return x.Rs
	}
	return nil
}

func (x *HelloReq) GetBs() []byte {
	if x != nil {
		return x.Bs
	}
	return nil
}

func (x *HelloReq) GetRbs() [][]byte {
	if x != nil {
		return x.Rbs
	}
	return nil
}

func (x *HelloReq) GetF() float32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *HelloReq) GetRf() []float32 {
	if x != nil {
		return x.Rf
	}
	return nil
}

func (x *HelloReq) GetD() float64 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *HelloReq) GetRd() []float64 {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *HelloReq) GetMsg() *Data {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *HelloReq) GetRmsg() []*Data {
	if x != nil {
		return x.Rmsg
	}
	return nil
}

func (x *HelloReq) GetMi32() map[uint64]int32 {
	if x != nil {
		return x.Mi32
	}
	return nil
}

func (x *HelloReq) GetMu32() map[uint64]uint32 {
	if x != nil {
		return x.Mu32
	}
	return nil
}

func (x *HelloReq) GetMi64() map[uint64]int64 {
	if x != nil {
		return x.Mi64
	}
	return nil
}

func (x *HelloReq) GetMu64() map[uint64]uint64 {
	if x != nil {
		return x.Mu64
	}
	return nil
}

func (x *HelloReq) GetMb() map[uint64]bool {
	if x != nil {
		return x.Mb
	}
	return nil
}

func (x *HelloReq) GetMe() map[uint64]TE {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *HelloReq) GetMs() map[uint64]string {
	if x != nil {
		return x.Ms
	}
	return nil
}

func (x *HelloReq) GetMbs() map[uint64][]byte {
	if x != nil {
		return x.Mbs
	}
	return nil
}

func (x *HelloReq) GetMf() map[uint64]float32 {
	if x != nil {
		return x.Mf
	}
	return nil
}

func (x *HelloReq) GetMd() map[uint64]float64 {
	if x != nil {
		return x.Md
	}
	return nil
}

func (x *HelloReq) GetMmsg() map[uint64]*Data {
	if x != nil {
		return x.Mmsg
	}
	return nil
}

func (m *HelloReq) GetUnion() isHelloReq_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *HelloReq) GetOi32() int32 {
	if x, ok := x.GetUnion().(*HelloReq_Oi32); ok {
		return x.Oi32
	}
	return 0
}

func (x *HelloReq) GetOu32() uint32 {
	if x, ok := x.GetUnion().(*HelloReq_Ou32); ok {
		return x.Ou32
	}
	return 0
}

func (x *HelloReq) GetOi64() int64 {
	if x, ok := x.GetUnion().(*HelloReq_Oi64); ok {
		return x.Oi64
	}
	return 0
}

func (x *HelloReq) GetOu64() uint64 {
	if x, ok := x.GetUnion().(*HelloReq_Ou64); ok {
		return x.Ou64
	}
	return 0
}

func (x *HelloReq) GetOf() float32 {
	if x, ok := x.GetUnion().(*HelloReq_Of); ok {
		return x.Of
	}
	return 0
}

func (x *HelloReq) GetOd() float64 {
	if x, ok := x.GetUnion().(*HelloReq_Od); ok {
		return x.Od
	}
	return 0
}

func (x *HelloReq) GetOs() string {
	if x, ok := x.GetUnion().(*HelloReq_Os); ok {
		return x.Os
	}
	return ""
}

func (x *HelloReq) GetObs() []byte {
	if x, ok := x.GetUnion().(*HelloReq_Obs); ok {
		return x.Obs
	}
	return nil
}

func (x *HelloReq) GetOe() TE {
	if x, ok := x.GetUnion().(*HelloReq_Oe); ok {
		return x.Oe
	}
	return TE_A
}

func (x *HelloReq) GetOb() bool {
	if x, ok := x.GetUnion().(*HelloReq_Ob); ok {
		return x.Ob
	}
	return false
}

func (x *HelloReq) GetOmsg() *Data {
	if x, ok := x.GetUnion().(*HelloReq_Omsg); ok {
		return x.Omsg
	}
	return nil
}

type isHelloReq_Union interface {
	isHelloReq_Union()
}

type HelloReq_Oi32 struct {
	Oi32 int32 `protobuf:"varint,34,opt,name=oi32,proto3,oneof"`
}

type HelloReq_Ou32 struct {
	Ou32 uint32 `protobuf:"varint,35,opt,name=ou32,proto3,oneof"`
}

type HelloReq_Oi64 struct {
	Oi64 int64 `protobuf:"varint,36,opt,name=oi64,proto3,oneof"`
}

type HelloReq_Ou64 struct {
	Ou64 uint64 `protobuf:"varint,37,opt,name=ou64,proto3,oneof"`
}

type HelloReq_Of struct {
	Of float32 `protobuf:"fixed32,38,opt,name=of,proto3,oneof"`
}

type HelloReq_Od struct {
	Od float64 `protobuf:"fixed64,39,opt,name=od,proto3,oneof"`
}

type HelloReq_Os struct {
	Os string `protobuf:"bytes,40,opt,name=os,proto3,oneof"`
}

type HelloReq_Obs struct {
	Obs []byte `protobuf:"bytes,41,opt,name=obs,proto3,oneof"`
}

type HelloReq_Oe struct {
	Oe TE `protobuf:"varint,42,opt,name=oe,proto3,enum=test.TE,oneof"`
}

type HelloReq_Ob struct {
	Ob bool `protobuf:"varint,43,opt,name=ob,proto3,oneof"`
}

type HelloReq_Omsg struct {
	Omsg *Data `protobuf:"bytes,44,opt,name=omsg,proto3,oneof"`
}

func (*HelloReq_Oi32) isHelloReq_Union() {}

func (*HelloReq_Ou32) isHelloReq_Union() {}

func (*HelloReq_Oi64) isHelloReq_Union() {}

func (*HelloReq_Ou64) isHelloReq_Union() {}

func (*HelloReq_Of) isHelloReq_Union() {}

func (*HelloReq_Od) isHelloReq_Union() {}

func (*HelloReq_Os) isHelloReq_Union() {}

func (*HelloReq_Obs) isHelloReq_Union() {}

func (*HelloReq_Oe) isHelloReq_Union() {}

func (*HelloReq_Ob) isHelloReq_Union() {}

func (*HelloReq_Omsg) isHelloReq_Union() {}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T *Data `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	E TE    `protobuf:"varint,2,opt,name=e,proto3,enum=test.TE" json:"e,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *Data) GetT() *Data {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Data) GetE() TE {
	if x != nil {
		return x.E
	}
	return TE_A
}

type HelloResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req *HelloReq `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (x *HelloResp) Reset() {
	*x = HelloResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResp) ProtoMessage() {}

func (x *HelloResp) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResp.ProtoReflect.Descriptor instead.
func (*HelloResp) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

func (x *HelloResp) GetReq() *HelloReq {
	if x != nil {
		return x.Req
	}
	return nil
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x70, 0x62, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a,
	0x0e, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x69, 0x33, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x72, 0x69,
	0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x75, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x69,
	0x36, 0x34, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x72, 0x69, 0x36, 0x34, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36, 0x34,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x36, 0x34, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04,
	0x72, 0x75, 0x36, 0x34, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x01, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x62, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x08, 0x52, 0x02,
	0x72, 0x62, 0x12, 0x16, 0x0a, 0x01, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x45, 0x52, 0x01, 0x65, 0x12, 0x18, 0x0a, 0x02, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x45,
	0x52, 0x02, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02,
	0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x62, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x03, 0x72, 0x62, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x66, 0x18, 0x12, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02,
	0x72, 0x66, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1e,
	0x0a, 0x04, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x69, 0x33, 0x32, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x69, 0x33, 0x32, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x75, 0x33, 0x32, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x75, 0x33, 0x32, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x69, 0x36, 0x34, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x69, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x04, 0x6d,
	0x75, 0x36, 0x34, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x75, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x02, 0x6d, 0x62,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x02, 0x6d, 0x62, 0x12, 0x27, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71,
	0x2e, 0x4d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x02,
	0x6d, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x02, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x6d, 0x62, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f,
	0x72, 0x65, 0x71, 0x2e, 0x4d, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x62,
	0x73, 0x12, 0x27, 0x0a, 0x02, 0x6d, 0x66, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d,
	0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x6d, 0x66, 0x12, 0x27, 0x0a, 0x02, 0x6d, 0x64,
	0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x02, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x6d, 0x73, 0x67, 0x18, 0x21, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72,
	0x65, 0x71, 0x2e, 0x4d, 0x6d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x6f, 0x69, 0x33, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x04, 0x6f, 0x69, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x04, 0x6f, 0x75, 0x33, 0x32,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x75, 0x33, 0x32, 0x12, 0x14,
	0x0a, 0x04, 0x6f, 0x69, 0x36, 0x34, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04,
	0x6f, 0x69, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x6f, 0x75, 0x36, 0x34, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x75, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x02, 0x6f, 0x66,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x66, 0x12, 0x10, 0x0a, 0x02,
	0x6f, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x64, 0x12, 0x10,
	0x0a, 0x02, 0x6f, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x12, 0x0a, 0x03, 0x6f, 0x62, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x03, 0x6f, 0x62, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x6f, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x08, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x45, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x65,
	0x12, 0x10, 0x0a, 0x02, 0x6f, 0x62, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02,
	0x6f, 0x62, 0x12, 0x20, 0x0a, 0x04, 0x6f, 0x6d, 0x73, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x6f, 0x6d, 0x73, 0x67, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x69, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a,
	0x09, 0x4d, 0x75, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x69, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x37, 0x0a, 0x09, 0x4d, 0x75, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x35, 0x0a, 0x07, 0x4d, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x07, 0x4d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x45, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x35, 0x0a, 0x07, 0x4d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x62, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x35, 0x0a, 0x07, 0x4d, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x35, 0x0a, 0x07, 0x4d, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x09, 0x4d, 0x6d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x01, 0x74, 0x12, 0x16, 0x0a,
	0x01, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x45, 0x52, 0x01, 0x65, 0x22, 0x2f, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65,
	0x71, 0x52, 0x03, 0x72, 0x65, 0x71, 0x2a, 0x12, 0x0a, 0x02, 0x54, 0x45, 0x12, 0x05, 0x0a, 0x01,
	0x41, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10, 0x03, 0x32, 0x3b, 0x0a, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x0f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x22, 0x07,
	0x8a, 0x9f, 0x49, 0x03, 0x67, 0x65, 0x74, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x6e, 0x6a, 0x69, 0x65, 0x31, 0x39, 0x39,
	0x32, 0x33, 0x34, 0x2f, 0x43, 0x6f, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x77, 0x65, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x77, 0x65,
	0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_test_proto_goTypes = []interface{}{
	(TE)(0),           // 0: test.TE
	(*HelloReq)(nil),  // 1: test.hello_req
	(*Data)(nil),      // 2: test.data
	(*HelloResp)(nil), // 3: test.hello_resp
	nil,               // 4: test.hello_req.Mi32Entry
	nil,               // 5: test.hello_req.Mu32Entry
	nil,               // 6: test.hello_req.Mi64Entry
	nil,               // 7: test.hello_req.Mu64Entry
	nil,               // 8: test.hello_req.MbEntry
	nil,               // 9: test.hello_req.MeEntry
	nil,               // 10: test.hello_req.MsEntry
	nil,               // 11: test.hello_req.MbsEntry
	nil,               // 12: test.hello_req.MfEntry
	nil,               // 13: test.hello_req.MdEntry
	nil,               // 14: test.hello_req.MmsgEntry
}
var file_test_proto_depIdxs = []int32{
	0,  // 0: test.hello_req.e:type_name -> test.TE
	0,  // 1: test.hello_req.es:type_name -> test.TE
	2,  // 2: test.hello_req.msg:type_name -> test.data
	2,  // 3: test.hello_req.rmsg:type_name -> test.data
	4,  // 4: test.hello_req.mi32:type_name -> test.hello_req.Mi32Entry
	5,  // 5: test.hello_req.mu32:type_name -> test.hello_req.Mu32Entry
	6,  // 6: test.hello_req.mi64:type_name -> test.hello_req.Mi64Entry
	7,  // 7: test.hello_req.mu64:type_name -> test.hello_req.Mu64Entry
	8,  // 8: test.hello_req.mb:type_name -> test.hello_req.MbEntry
	9,  // 9: test.hello_req.me:type_name -> test.hello_req.MeEntry
	10, // 10: test.hello_req.ms:type_name -> test.hello_req.MsEntry
	11, // 11: test.hello_req.mbs:type_name -> test.hello_req.MbsEntry
	12, // 12: test.hello_req.mf:type_name -> test.hello_req.MfEntry
	13, // 13: test.hello_req.md:type_name -> test.hello_req.MdEntry
	14, // 14: test.hello_req.mmsg:type_name -> test.hello_req.MmsgEntry
	0,  // 15: test.hello_req.oe:type_name -> test.TE
	2,  // 16: test.hello_req.omsg:type_name -> test.data
	2,  // 17: test.data.t:type_name -> test.data
	0,  // 18: test.data.e:type_name -> test.TE
	1,  // 19: test.hello_resp.req:type_name -> test.hello_req
	0,  // 20: test.hello_req.MeEntry.value:type_name -> test.TE
	2,  // 21: test.hello_req.MmsgEntry.value:type_name -> test.data
	1,  // 22: test.test.hello:input_type -> test.hello_req
	3,  // 23: test.test.hello:output_type -> test.hello_resp
	23, // [23:24] is the sub-list for method output_type
	22, // [22:23] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*HelloReq_Oi32)(nil),
		(*HelloReq_Ou32)(nil),
		(*HelloReq_Oi64)(nil),
		(*HelloReq_Ou64)(nil),
		(*HelloReq_Of)(nil),
		(*HelloReq_Od)(nil),
		(*HelloReq_Os)(nil),
		(*HelloReq_Obs)(nil),
		(*HelloReq_Oe)(nil),
		(*HelloReq_Ob)(nil),
		(*HelloReq_Omsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
