// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package logger

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgType int32

const (
	HEART   MsgType = 0
	VERIFY  MsgType = 1
	LOG     MsgType = 2
	CONFIRM MsgType = 3
	REMOVE  MsgType = 4
)

var MsgType_name = map[int32]string{
	0: "HEART",
	1: "VERIFY",
	2: "LOG",
	3: "CONFIRM",
	4: "REMOVE",
}

var MsgType_value = map[string]int32{
	"HEART":   0,
	"VERIFY":  1,
	"LOG":     2,
	"CONFIRM": 3,
	"REMOVE":  4,
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

type TotalMsg struct {
	Type    MsgType     `protobuf:"varint,1,opt,name=type,proto3,enum=logger.MsgType" json:"type,omitempty"`
	Verify  *VerifyMsg  `protobuf:"bytes,2,opt,name=verify,proto3" json:"verify,omitempty"`
	Log     *LogMsg     `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Confirm *ConfirmMsg `protobuf:"bytes,4,opt,name=confirm,proto3" json:"confirm,omitempty"`
	Remove  *RemoveMsg  `protobuf:"bytes,5,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (m *TotalMsg) Reset()      { *m = TotalMsg{} }
func (*TotalMsg) ProtoMessage() {}
func (*TotalMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *TotalMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalMsg.Merge(m, src)
}
func (m *TotalMsg) XXX_Size() int {
	return m.Size()
}
func (m *TotalMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TotalMsg proto.InternalMessageInfo

func (m *TotalMsg) GetType() MsgType {
	if m != nil {
		return m.Type
	}
	return HEART
}

func (m *TotalMsg) GetVerify() *VerifyMsg {
	if m != nil {
		return m.Verify
	}
	return nil
}

func (m *TotalMsg) GetLog() *LogMsg {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *TotalMsg) GetConfirm() *ConfirmMsg {
	if m != nil {
		return m.Confirm
	}
	return nil
}

func (m *TotalMsg) GetRemove() *RemoveMsg {
	if m != nil {
		return m.Remove
	}
	return nil
}

type VerifyMsg struct {
}

func (m *VerifyMsg) Reset()      { *m = VerifyMsg{} }
func (*VerifyMsg) ProtoMessage() {}
func (*VerifyMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}
func (m *VerifyMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyMsg.Merge(m, src)
}
func (m *VerifyMsg) XXX_Size() int {
	return m.Size()
}
func (m *VerifyMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyMsg.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyMsg proto.InternalMessageInfo

type LogMsg struct {
	Serverid int64  `protobuf:"varint,1,opt,name=serverid,proto3" json:"serverid,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Offset   uint32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Memindex uint32 `protobuf:"varint,5,opt,name=memindex,proto3" json:"memindex,omitempty"`
	Synctime int64  `protobuf:"varint,6,opt,name=synctime,proto3" json:"synctime,omitempty"`
}

func (m *LogMsg) Reset()      { *m = LogMsg{} }
func (*LogMsg) ProtoMessage() {}
func (*LogMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}
func (m *LogMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMsg.Merge(m, src)
}
func (m *LogMsg) XXX_Size() int {
	return m.Size()
}
func (m *LogMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LogMsg proto.InternalMessageInfo

func (m *LogMsg) GetServerid() int64 {
	if m != nil {
		return m.Serverid
	}
	return 0
}

func (m *LogMsg) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *LogMsg) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *LogMsg) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *LogMsg) GetMemindex() uint32 {
	if m != nil {
		return m.Memindex
	}
	return 0
}

func (m *LogMsg) GetSynctime() int64 {
	if m != nil {
		return m.Synctime
	}
	return 0
}

type ConfirmMsg struct {
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Memindex uint32 `protobuf:"varint,3,opt,name=memindex,proto3" json:"memindex,omitempty"`
	Synctime int64  `protobuf:"varint,4,opt,name=synctime,proto3" json:"synctime,omitempty"`
}

func (m *ConfirmMsg) Reset()      { *m = ConfirmMsg{} }
func (*ConfirmMsg) ProtoMessage() {}
func (*ConfirmMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}
func (m *ConfirmMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmMsg.Merge(m, src)
}
func (m *ConfirmMsg) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmMsg proto.InternalMessageInfo

func (m *ConfirmMsg) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ConfirmMsg) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConfirmMsg) GetMemindex() uint32 {
	if m != nil {
		return m.Memindex
	}
	return 0
}

func (m *ConfirmMsg) GetSynctime() int64 {
	if m != nil {
		return m.Synctime
	}
	return 0
}

type RemoveMsg struct {
	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	Hour  int32 `protobuf:"varint,4,opt,name=hour,proto3" json:"hour,omitempty"`
}

func (m *RemoveMsg) Reset()      { *m = RemoveMsg{} }
func (*RemoveMsg) ProtoMessage() {}
func (*RemoveMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{4}
}
func (m *RemoveMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMsg.Merge(m, src)
}
func (m *RemoveMsg) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMsg proto.InternalMessageInfo

func (m *RemoveMsg) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *RemoveMsg) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *RemoveMsg) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *RemoveMsg) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func init() {
	proto.RegisterEnum("logger.MsgType", MsgType_name, MsgType_value)
	proto.RegisterType((*TotalMsg)(nil), "logger.TotalMsg")
	proto.RegisterType((*VerifyMsg)(nil), "logger.VerifyMsg")
	proto.RegisterType((*LogMsg)(nil), "logger.LogMsg")
	proto.RegisterType((*ConfirmMsg)(nil), "logger.ConfirmMsg")
	proto.RegisterType((*RemoveMsg)(nil), "logger.RemoveMsg")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x3d, 0xf5, 0x25, 0xcd, 0x09, 0x29, 0x66, 0x84, 0x90, 0xc5, 0x62, 0x14, 0x85, 0x4d,
	0x41, 0x28, 0x8b, 0xc2, 0x0b, 0xd0, 0x2a, 0x85, 0x4a, 0x35, 0x91, 0x46, 0x51, 0x24, 0xc4, 0xca,
	0x34, 0xc7, 0xae, 0xa5, 0xd8, 0x13, 0xd9, 0xa6, 0xaa, 0x77, 0x3c, 0x02, 0x8f, 0x81, 0x78, 0x12,
	0x96, 0xd9, 0x20, 0x75, 0x49, 0x9c, 0x0d, 0xcb, 0x3e, 0x02, 0x9a, 0xe3, 0x0b, 0x2a, 0x52, 0xd9,
	0xcd, 0x3f, 0xfe, 0x8e, 0xbe, 0xff, 0x58, 0x03, 0xc3, 0x04, 0xf3, 0x3c, 0x88, 0x70, 0xb2, 0xce,
	0x54, 0xa1, 0xb8, 0xb3, 0x52, 0x51, 0x84, 0xd9, 0xf8, 0x27, 0x83, 0xfd, 0xb9, 0x2a, 0x82, 0x95,
	0x9f, 0x47, 0xfc, 0x19, 0x58, 0x45, 0xb9, 0x46, 0x8f, 0x8d, 0xd8, 0xe1, 0xc1, 0xd1, 0xc3, 0x49,
	0xcd, 0x4c, 0xfc, 0x3c, 0x9a, 0x97, 0x6b, 0x94, 0xf4, 0x91, 0x3f, 0x07, 0xe7, 0x0a, 0xb3, 0x38,
	0x2c, 0xbd, 0xbd, 0x11, 0x3b, 0x1c, 0x1c, 0x3d, 0x6a, 0xb1, 0x05, 0xdd, 0xfa, 0x79, 0x24, 0x1b,
	0x80, 0x8f, 0xc0, 0x5c, 0xa9, 0xc8, 0x33, 0x89, 0x3b, 0x68, 0xb9, 0x73, 0x15, 0x69, 0x48, 0x7f,
	0xe2, 0x2f, 0xa1, 0x77, 0xa1, 0xd2, 0x30, 0xce, 0x12, 0xcf, 0x22, 0x8a, 0xb7, 0xd4, 0x49, 0x7d,
	0xad, 0xc9, 0x16, 0xd1, 0xea, 0x0c, 0x13, 0x75, 0x85, 0x9e, 0x7d, 0x57, 0x2d, 0xe9, 0x96, 0xd4,
	0x35, 0x30, 0x1e, 0x40, 0xbf, 0xeb, 0x33, 0xfe, 0xce, 0xc0, 0xa9, 0xad, 0xfc, 0x29, 0xec, 0xe7,
	0x98, 0xe9, 0x7e, 0x4b, 0x5a, 0xd3, 0x94, 0x5d, 0xe6, 0x1e, 0x95, 0x29, 0x30, 0x2d, 0x68, 0xb5,
	0x07, 0xb2, 0x8d, 0x7a, 0x2a, 0x8c, 0x57, 0x98, 0x06, 0x09, 0xd2, 0x36, 0x7d, 0xd9, 0x65, 0xfe,
	0x04, 0x1c, 0x15, 0x86, 0x39, 0x16, 0xb4, 0xc1, 0x50, 0x36, 0x49, 0xcf, 0x24, 0x98, 0xc4, 0xe9,
	0x12, 0xaf, 0xa9, 0xee, 0x50, 0x76, 0x99, 0x5a, 0x94, 0xe9, 0x45, 0x11, 0x27, 0xe8, 0x39, 0x4d,
	0x8b, 0x26, 0x8f, 0xaf, 0x01, 0xfe, 0xee, 0x7e, 0xc7, 0xcc, 0xee, 0x35, 0xef, 0xdd, 0x6b, 0x36,
	0xff, 0x63, 0xb6, 0xfe, 0x31, 0x7f, 0x84, 0x7e, 0xf7, 0x23, 0x39, 0x07, 0xab, 0xc4, 0x20, 0x23,
	0xa9, 0x2d, 0xe9, 0xcc, 0x1f, 0x83, 0x9d, 0xa8, 0xb4, 0xb8, 0x24, 0x9f, 0x2d, 0xeb, 0xc0, 0x5d,
	0x30, 0x97, 0x41, 0x49, 0x26, 0x5b, 0xea, 0xa3, 0x9e, 0xbd, 0x54, 0x9f, 0x33, 0x12, 0xd8, 0x92,
	0xce, 0x2f, 0x8e, 0xa1, 0xd7, 0xbc, 0x23, 0xde, 0x07, 0xfb, 0xdd, 0xf4, 0x8d, 0x9c, 0xbb, 0x06,
	0x07, 0x70, 0x16, 0x53, 0x79, 0x76, 0xfa, 0xc1, 0x65, 0xbc, 0x07, 0xe6, 0xf9, 0xec, 0xad, 0xbb,
	0xc7, 0x07, 0xd0, 0x3b, 0x99, 0xbd, 0x3f, 0x3d, 0x93, 0xbe, 0x6b, 0x6a, 0x42, 0x4e, 0xfd, 0xd9,
	0x62, 0xea, 0x5a, 0xc7, 0xaf, 0x37, 0x5b, 0x61, 0xdc, 0x6c, 0x85, 0x71, 0xbb, 0x15, 0xec, 0x4b,
	0x25, 0xd8, 0xb7, 0x4a, 0xb0, 0x1f, 0x95, 0x60, 0x9b, 0x4a, 0xb0, 0x5f, 0x95, 0x60, 0xbf, 0x2b,
	0x61, 0xdc, 0x56, 0x82, 0x7d, 0xdd, 0x09, 0x63, 0xb3, 0x13, 0xc6, 0xcd, 0x4e, 0x18, 0x9f, 0x1c,
	0x7a, 0xf1, 0xaf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x63, 0x8c, 0xf0, 0x04, 0x02, 0x03, 0x00,
	0x00,
}

func (x MsgType) String() string {
	s, ok := MsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TotalMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TotalMsg)
	if !ok {
		that2, ok := that.(TotalMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Verify.Equal(that1.Verify) {
		return false
	}
	if !this.Log.Equal(that1.Log) {
		return false
	}
	if !this.Confirm.Equal(that1.Confirm) {
		return false
	}
	if !this.Remove.Equal(that1.Remove) {
		return false
	}
	return true
}
func (this *VerifyMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerifyMsg)
	if !ok {
		that2, ok := that.(VerifyMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LogMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogMsg)
	if !ok {
		that2, ok := that.(LogMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Serverid != that1.Serverid {
		return false
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return false
	}
	if this.Filename != that1.Filename {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Memindex != that1.Memindex {
		return false
	}
	if this.Synctime != that1.Synctime {
		return false
	}
	return true
}
func (this *ConfirmMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfirmMsg)
	if !ok {
		that2, ok := that.(ConfirmMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Filename != that1.Filename {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Memindex != that1.Memindex {
		return false
	}
	if this.Synctime != that1.Synctime {
		return false
	}
	return true
}
func (this *RemoveMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveMsg)
	if !ok {
		that2, ok := that.(RemoveMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if this.Hour != that1.Hour {
		return false
	}
	return true
}
func (this *TotalMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&logger.TotalMsg{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Verify != nil {
		s = append(s, "Verify: "+fmt.Sprintf("%#v", this.Verify)+",\n")
	}
	if this.Log != nil {
		s = append(s, "Log: "+fmt.Sprintf("%#v", this.Log)+",\n")
	}
	if this.Confirm != nil {
		s = append(s, "Confirm: "+fmt.Sprintf("%#v", this.Confirm)+",\n")
	}
	if this.Remove != nil {
		s = append(s, "Remove: "+fmt.Sprintf("%#v", this.Remove)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifyMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&logger.VerifyMsg{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&logger.LogMsg{")
	s = append(s, "Serverid: "+fmt.Sprintf("%#v", this.Serverid)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Filename: "+fmt.Sprintf("%#v", this.Filename)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Memindex: "+fmt.Sprintf("%#v", this.Memindex)+",\n")
	s = append(s, "Synctime: "+fmt.Sprintf("%#v", this.Synctime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfirmMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&logger.ConfirmMsg{")
	s = append(s, "Filename: "+fmt.Sprintf("%#v", this.Filename)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Memindex: "+fmt.Sprintf("%#v", this.Memindex)+",\n")
	s = append(s, "Synctime: "+fmt.Sprintf("%#v", this.Synctime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&logger.RemoveMsg{")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "Hour: "+fmt.Sprintf("%#v", this.Hour)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TotalMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Remove != nil {
		{
			size, err := m.Remove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Log != nil {
		{
			size, err := m.Log.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Verify != nil {
		{
			size, err := m.Verify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerifyMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LogMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Synctime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Synctime))
		i--
		dAtA[i] = 0x30
	}
	if m.Memindex != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Memindex))
		i--
		dAtA[i] = 0x28
	}
	if m.Offset != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Serverid != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Serverid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Synctime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Synctime))
		i--
		dAtA[i] = 0x20
	}
	if m.Memindex != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Memindex))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hour != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Hour))
		i--
		dAtA[i] = 0x20
	}
	if m.Day != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Day))
		i--
		dAtA[i] = 0x18
	}
	if m.Month != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Month))
		i--
		dAtA[i] = 0x10
	}
	if m.Year != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Year))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TotalMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.Verify != nil {
		l = m.Verify.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Log != nil {
		l = m.Log.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Remove != nil {
		l = m.Remove.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *VerifyMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LogMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Serverid != 0 {
		n += 1 + sovMessage(uint64(m.Serverid))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovMessage(uint64(m.Offset))
	}
	if m.Memindex != 0 {
		n += 1 + sovMessage(uint64(m.Memindex))
	}
	if m.Synctime != 0 {
		n += 1 + sovMessage(uint64(m.Synctime))
	}
	return n
}

func (m *ConfirmMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovMessage(uint64(m.Offset))
	}
	if m.Memindex != 0 {
		n += 1 + sovMessage(uint64(m.Memindex))
	}
	if m.Synctime != 0 {
		n += 1 + sovMessage(uint64(m.Synctime))
	}
	return n
}

func (m *RemoveMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Year != 0 {
		n += 1 + sovMessage(uint64(m.Year))
	}
	if m.Month != 0 {
		n += 1 + sovMessage(uint64(m.Month))
	}
	if m.Day != 0 {
		n += 1 + sovMessage(uint64(m.Day))
	}
	if m.Hour != 0 {
		n += 1 + sovMessage(uint64(m.Hour))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TotalMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TotalMsg{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Verify:` + strings.Replace(this.Verify.String(), "VerifyMsg", "VerifyMsg", 1) + `,`,
		`Log:` + strings.Replace(this.Log.String(), "LogMsg", "LogMsg", 1) + `,`,
		`Confirm:` + strings.Replace(this.Confirm.String(), "ConfirmMsg", "ConfirmMsg", 1) + `,`,
		`Remove:` + strings.Replace(this.Remove.String(), "RemoveMsg", "RemoveMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifyMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyMsg{`,
		`}`,
	}, "")
	return s
}
func (this *LogMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogMsg{`,
		`Serverid:` + fmt.Sprintf("%v", this.Serverid) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Filename:` + fmt.Sprintf("%v", this.Filename) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Memindex:` + fmt.Sprintf("%v", this.Memindex) + `,`,
		`Synctime:` + fmt.Sprintf("%v", this.Synctime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfirmMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfirmMsg{`,
		`Filename:` + fmt.Sprintf("%v", this.Filename) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Memindex:` + fmt.Sprintf("%v", this.Memindex) + `,`,
		`Synctime:` + fmt.Sprintf("%v", this.Synctime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveMsg{`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`Hour:` + fmt.Sprintf("%v", this.Hour) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TotalMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Verify == nil {
				m.Verify = &VerifyMsg{}
			}
			if err := m.Verify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &LogMsg{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &ConfirmMsg{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Remove == nil {
				m.Remove = &RemoveMsg{}
			}
			if err := m.Remove.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverid", wireType)
			}
			m.Serverid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serverid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memindex", wireType)
			}
			m.Memindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synctime", wireType)
			}
			m.Synctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Synctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memindex", wireType)
			}
			m.Memindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synctime", wireType)
			}
			m.Synctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Synctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hour", wireType)
			}
			m.Hour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hour |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
