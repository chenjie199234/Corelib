//protoc -I ../../../pbex -I . --go_out=paths=source_relative:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: test.proto

package test

import (
	_ "github.com/chenjie199234/Corelib/pbex"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEnum int32

const (
	TestEnum_ENUMA TestEnum = 0
	TestEnum_ENUMB TestEnum = 1
)

// Enum value maps for TestEnum.
var (
	TestEnum_name = map[int32]string{
		0: "ENUMA",
		1: "ENUMB",
	}
	TestEnum_value = map[string]int32{
		"ENUMA": 0,
		"ENUMB": 1,
	}
)

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}

func (x TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (TestEnum) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum.Descriptor instead.
func (TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type TestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestData) Reset() {
	*x = TestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestData) ProtoMessage() {}

func (x *TestData) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestData.ProtoReflect.Descriptor instead.
func (*TestData) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type Helloreq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I32       int32                `protobuf:"varint,1,opt,name=i32,proto3" json:"i32,omitempty"`
	Ri32      []int32              `protobuf:"varint,2,rep,packed,name=ri32,proto3" json:"ri32,omitempty"`
	Ui32      uint32               `protobuf:"varint,3,opt,name=ui32,proto3" json:"ui32,omitempty"`
	Rui32     []uint32             `protobuf:"varint,4,rep,packed,name=rui32,proto3" json:"rui32,omitempty"`
	I64       int64                `protobuf:"varint,5,opt,name=i64,proto3" json:"i64,omitempty"`
	Ri64      []int64              `protobuf:"varint,6,rep,packed,name=ri64,proto3" json:"ri64,omitempty"`
	Ui64      uint64               `protobuf:"varint,7,opt,name=ui64,proto3" json:"ui64,omitempty"`
	Rui64     []uint64             `protobuf:"varint,8,rep,packed,name=rui64,proto3" json:"rui64,omitempty"`
	Bs        []byte               `protobuf:"bytes,9,opt,name=bs,proto3" json:"bs,omitempty"`
	Rbs       [][]byte             `protobuf:"bytes,10,rep,name=rbs,proto3" json:"rbs,omitempty"`
	Ss        string               `protobuf:"bytes,11,opt,name=ss,proto3" json:"ss,omitempty"`
	Rss       []string             `protobuf:"bytes,12,rep,name=rss,proto3" json:"rss,omitempty"`
	F         float32              `protobuf:"fixed32,13,opt,name=f,proto3" json:"f,omitempty"`
	Rf        []float32            `protobuf:"fixed32,14,rep,packed,name=rf,proto3" json:"rf,omitempty"`
	D         float64              `protobuf:"fixed64,15,opt,name=d,proto3" json:"d,omitempty"`
	Rd        []float64            `protobuf:"fixed64,16,rep,packed,name=rd,proto3" json:"rd,omitempty"`
	E         TestEnum             `protobuf:"varint,17,opt,name=e,proto3,enum=test.TestEnum" json:"e,omitempty"`
	Re        []TestEnum           `protobuf:"varint,18,rep,packed,name=re,proto3,enum=test.TestEnum" json:"re,omitempty"`
	M         *TestData            `protobuf:"bytes,19,opt,name=m,proto3" json:"m,omitempty"`
	Rm        []*TestData          `protobuf:"bytes,20,rep,name=rm,proto3" json:"rm,omitempty"`
	Mi32I32   map[int32]int32      `protobuf:"bytes,21,rep,name=mi32_i32,json=mi32I32,proto3" json:"mi32_i32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi32Ui32  map[int32]uint32     `protobuf:"bytes,22,rep,name=mi32_ui32,json=mi32Ui32,proto3" json:"mi32_ui32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi32I64   map[int32]int64      `protobuf:"bytes,23,rep,name=mi32_i64,json=mi32I64,proto3" json:"mi32_i64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi32Ui64  map[int32]uint64     `protobuf:"bytes,24,rep,name=mi32_ui64,json=mi32Ui64,proto3" json:"mi32_ui64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi32Bs    map[int32][]byte     `protobuf:"bytes,25,rep,name=mi32_bs,json=mi32Bs,proto3" json:"mi32_bs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mi32Ss    map[int32]string     `protobuf:"bytes,26,rep,name=mi32_ss,json=mi32Ss,proto3" json:"mi32_ss,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mi32F     map[int32]float32    `protobuf:"bytes,27,rep,name=mi32_f,json=mi32F,proto3" json:"mi32_f,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Mi32D     map[int32]float64    `protobuf:"bytes,28,rep,name=mi32_d,json=mi32D,proto3" json:"mi32_d,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Mi32E     map[int32]TestEnum   `protobuf:"bytes,29,rep,name=mi32_e,json=mi32E,proto3" json:"mi32_e,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.TestEnum"`
	Mi32M     map[int32]*TestData  `protobuf:"bytes,30,rep,name=mi32_m,json=mi32M,proto3" json:"mi32_m,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mui32I32  map[uint32]int32     `protobuf:"bytes,31,rep,name=mui32_i32,json=mui32I32,proto3" json:"mui32_i32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mui32Ui32 map[uint32]uint32    `protobuf:"bytes,32,rep,name=mui32_ui32,json=mui32Ui32,proto3" json:"mui32_ui32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mui32I64  map[uint32]int64     `protobuf:"bytes,33,rep,name=mui32_i64,json=mui32I64,proto3" json:"mui32_i64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mui32Ui64 map[uint32]uint64    `protobuf:"bytes,34,rep,name=mui32_ui64,json=mui32Ui64,proto3" json:"mui32_ui64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mui32Bs   map[uint32][]byte    `protobuf:"bytes,35,rep,name=mui32_bs,json=mui32Bs,proto3" json:"mui32_bs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mui32Ss   map[uint32]string    `protobuf:"bytes,36,rep,name=mui32_ss,json=mui32Ss,proto3" json:"mui32_ss,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mui32F    map[uint32]float32   `protobuf:"bytes,37,rep,name=mui32_f,json=mui32F,proto3" json:"mui32_f,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Mui32D    map[uint32]float64   `protobuf:"bytes,38,rep,name=mui32_d,json=mui32D,proto3" json:"mui32_d,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Mui32E    map[uint32]TestEnum  `protobuf:"bytes,39,rep,name=mui32_e,json=mui32E,proto3" json:"mui32_e,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.TestEnum"`
	Mui32M    map[uint32]*TestData `protobuf:"bytes,40,rep,name=mui32_m,json=mui32M,proto3" json:"mui32_m,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mi64I32   map[int64]int32      `protobuf:"bytes,41,rep,name=mi64_i32,json=mi64I32,proto3" json:"mi64_i32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi64Ui32  map[int64]uint32     `protobuf:"bytes,42,rep,name=mi64_ui32,json=mi64Ui32,proto3" json:"mi64_ui32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi64I64   map[int64]int64      `protobuf:"bytes,43,rep,name=mi64_i64,json=mi64I64,proto3" json:"mi64_i64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi64Ui64  map[int64]uint64     `protobuf:"bytes,44,rep,name=mi64_ui64,json=mi64Ui64,proto3" json:"mi64_ui64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mi64Bs    map[int64][]byte     `protobuf:"bytes,45,rep,name=mi64_bs,json=mi64Bs,proto3" json:"mi64_bs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mi64Ss    map[int64]string     `protobuf:"bytes,46,rep,name=mi64_ss,json=mi64Ss,proto3" json:"mi64_ss,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mi64F     map[int64]float32    `protobuf:"bytes,47,rep,name=mi64_f,json=mi64F,proto3" json:"mi64_f,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Mi64D     map[int64]float64    `protobuf:"bytes,48,rep,name=mi64_d,json=mi64D,proto3" json:"mi64_d,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Mi64E     map[int64]TestEnum   `protobuf:"bytes,49,rep,name=mi64_e,json=mi64E,proto3" json:"mi64_e,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.TestEnum"`
	Mi64M     map[int64]*TestData  `protobuf:"bytes,50,rep,name=mi64_m,json=mi64M,proto3" json:"mi64_m,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mui64I32  map[uint64]int32     `protobuf:"bytes,51,rep,name=mui64_i32,json=mui64I32,proto3" json:"mui64_i32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mui64Ui32 map[uint64]uint32    `protobuf:"bytes,52,rep,name=mui64_ui32,json=mui64Ui32,proto3" json:"mui64_ui32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mui64I64  map[uint64]int64     `protobuf:"bytes,53,rep,name=mui64_i64,json=mui64I64,proto3" json:"mui64_i64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mui64Ui64 map[uint64]uint64    `protobuf:"bytes,54,rep,name=mui64_ui64,json=mui64Ui64,proto3" json:"mui64_ui64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mui64Bs   map[uint64][]byte    `protobuf:"bytes,55,rep,name=mui64_bs,json=mui64Bs,proto3" json:"mui64_bs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mui64Ss   map[uint64]string    `protobuf:"bytes,56,rep,name=mui64_ss,json=mui64Ss,proto3" json:"mui64_ss,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mui64F    map[uint64]float32   `protobuf:"bytes,57,rep,name=mui64_f,json=mui64F,proto3" json:"mui64_f,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Mui64D    map[uint64]float64   `protobuf:"bytes,58,rep,name=mui64_d,json=mui64D,proto3" json:"mui64_d,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Mui64E    map[uint64]TestEnum  `protobuf:"bytes,59,rep,name=mui64_e,json=mui64E,proto3" json:"mui64_e,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.TestEnum"`
	Mui64M    map[uint64]*TestData `protobuf:"bytes,60,rep,name=mui64_m,json=mui64M,proto3" json:"mui64_m,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MssI32    map[string]int32     `protobuf:"bytes,61,rep,name=mss_i32,json=mssI32,proto3" json:"mss_i32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MssUi32   map[string]uint32    `protobuf:"bytes,62,rep,name=mss_ui32,json=mssUi32,proto3" json:"mss_ui32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MssI64    map[string]int64     `protobuf:"bytes,63,rep,name=mss_i64,json=mssI64,proto3" json:"mss_i64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MssUi64   map[string]uint64    `protobuf:"bytes,64,rep,name=mss_ui64,json=mssUi64,proto3" json:"mss_ui64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MssBs     map[string][]byte    `protobuf:"bytes,65,rep,name=mss_bs,json=mssBs,proto3" json:"mss_bs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MssSs     map[string]string    `protobuf:"bytes,66,rep,name=mss_ss,json=mssSs,proto3" json:"mss_ss,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MssF      map[string]float32   `protobuf:"bytes,67,rep,name=mss_f,json=mssF,proto3" json:"mss_f,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MssD      map[string]float64   `protobuf:"bytes,68,rep,name=mss_d,json=mssD,proto3" json:"mss_d,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MssE      map[string]TestEnum  `protobuf:"bytes,69,rep,name=mss_e,json=mssE,proto3" json:"mss_e,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.TestEnum"`
	MssM      map[string]*TestData `protobuf:"bytes,70,rep,name=mss_m,json=mssM,proto3" json:"mss_m,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Helloreq) Reset() {
	*x = Helloreq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Helloreq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Helloreq) ProtoMessage() {}

func (x *Helloreq) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Helloreq.ProtoReflect.Descriptor instead.
func (*Helloreq) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *Helloreq) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *Helloreq) GetRi32() []int32 {
	if x != nil {
		return x.Ri32
	}
	return nil
}

func (x *Helloreq) GetUi32() uint32 {
	if x != nil {
		return x.Ui32
	}
	return 0
}

func (x *Helloreq) GetRui32() []uint32 {
	if x != nil {
		return x.Rui32
	}
	return nil
}

func (x *Helloreq) GetI64() int64 {
	if x != nil {
		return x.I64
	}
	return 0
}

func (x *Helloreq) GetRi64() []int64 {
	if x != nil {
		return x.Ri64
	}
	return nil
}

func (x *Helloreq) GetUi64() uint64 {
	if x != nil {
		return x.Ui64
	}
	return 0
}

func (x *Helloreq) GetRui64() []uint64 {
	if x != nil {
		return x.Rui64
	}
	return nil
}

func (x *Helloreq) GetBs() []byte {
	if x != nil {
		return x.Bs
	}
	return nil
}

func (x *Helloreq) GetRbs() [][]byte {
	if x != nil {
		return x.Rbs
	}
	return nil
}

func (x *Helloreq) GetSs() string {
	if x != nil {
		return x.Ss
	}
	return ""
}

func (x *Helloreq) GetRss() []string {
	if x != nil {
		return x.Rss
	}
	return nil
}

func (x *Helloreq) GetF() float32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *Helloreq) GetRf() []float32 {
	if x != nil {
		return x.Rf
	}
	return nil
}

func (x *Helloreq) GetD() float64 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *Helloreq) GetRd() []float64 {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *Helloreq) GetE() TestEnum {
	if x != nil {
		return x.E
	}
	return TestEnum_ENUMA
}

func (x *Helloreq) GetRe() []TestEnum {
	if x != nil {
		return x.Re
	}
	return nil
}

func (x *Helloreq) GetM() *TestData {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *Helloreq) GetRm() []*TestData {
	if x != nil {
		return x.Rm
	}
	return nil
}

func (x *Helloreq) GetMi32I32() map[int32]int32 {
	if x != nil {
		return x.Mi32I32
	}
	return nil
}

func (x *Helloreq) GetMi32Ui32() map[int32]uint32 {
	if x != nil {
		return x.Mi32Ui32
	}
	return nil
}

func (x *Helloreq) GetMi32I64() map[int32]int64 {
	if x != nil {
		return x.Mi32I64
	}
	return nil
}

func (x *Helloreq) GetMi32Ui64() map[int32]uint64 {
	if x != nil {
		return x.Mi32Ui64
	}
	return nil
}

func (x *Helloreq) GetMi32Bs() map[int32][]byte {
	if x != nil {
		return x.Mi32Bs
	}
	return nil
}

func (x *Helloreq) GetMi32Ss() map[int32]string {
	if x != nil {
		return x.Mi32Ss
	}
	return nil
}

func (x *Helloreq) GetMi32F() map[int32]float32 {
	if x != nil {
		return x.Mi32F
	}
	return nil
}

func (x *Helloreq) GetMi32D() map[int32]float64 {
	if x != nil {
		return x.Mi32D
	}
	return nil
}

func (x *Helloreq) GetMi32E() map[int32]TestEnum {
	if x != nil {
		return x.Mi32E
	}
	return nil
}

func (x *Helloreq) GetMi32M() map[int32]*TestData {
	if x != nil {
		return x.Mi32M
	}
	return nil
}

func (x *Helloreq) GetMui32I32() map[uint32]int32 {
	if x != nil {
		return x.Mui32I32
	}
	return nil
}

func (x *Helloreq) GetMui32Ui32() map[uint32]uint32 {
	if x != nil {
		return x.Mui32Ui32
	}
	return nil
}

func (x *Helloreq) GetMui32I64() map[uint32]int64 {
	if x != nil {
		return x.Mui32I64
	}
	return nil
}

func (x *Helloreq) GetMui32Ui64() map[uint32]uint64 {
	if x != nil {
		return x.Mui32Ui64
	}
	return nil
}

func (x *Helloreq) GetMui32Bs() map[uint32][]byte {
	if x != nil {
		return x.Mui32Bs
	}
	return nil
}

func (x *Helloreq) GetMui32Ss() map[uint32]string {
	if x != nil {
		return x.Mui32Ss
	}
	return nil
}

func (x *Helloreq) GetMui32F() map[uint32]float32 {
	if x != nil {
		return x.Mui32F
	}
	return nil
}

func (x *Helloreq) GetMui32D() map[uint32]float64 {
	if x != nil {
		return x.Mui32D
	}
	return nil
}

func (x *Helloreq) GetMui32E() map[uint32]TestEnum {
	if x != nil {
		return x.Mui32E
	}
	return nil
}

func (x *Helloreq) GetMui32M() map[uint32]*TestData {
	if x != nil {
		return x.Mui32M
	}
	return nil
}

func (x *Helloreq) GetMi64I32() map[int64]int32 {
	if x != nil {
		return x.Mi64I32
	}
	return nil
}

func (x *Helloreq) GetMi64Ui32() map[int64]uint32 {
	if x != nil {
		return x.Mi64Ui32
	}
	return nil
}

func (x *Helloreq) GetMi64I64() map[int64]int64 {
	if x != nil {
		return x.Mi64I64
	}
	return nil
}

func (x *Helloreq) GetMi64Ui64() map[int64]uint64 {
	if x != nil {
		return x.Mi64Ui64
	}
	return nil
}

func (x *Helloreq) GetMi64Bs() map[int64][]byte {
	if x != nil {
		return x.Mi64Bs
	}
	return nil
}

func (x *Helloreq) GetMi64Ss() map[int64]string {
	if x != nil {
		return x.Mi64Ss
	}
	return nil
}

func (x *Helloreq) GetMi64F() map[int64]float32 {
	if x != nil {
		return x.Mi64F
	}
	return nil
}

func (x *Helloreq) GetMi64D() map[int64]float64 {
	if x != nil {
		return x.Mi64D
	}
	return nil
}

func (x *Helloreq) GetMi64E() map[int64]TestEnum {
	if x != nil {
		return x.Mi64E
	}
	return nil
}

func (x *Helloreq) GetMi64M() map[int64]*TestData {
	if x != nil {
		return x.Mi64M
	}
	return nil
}

func (x *Helloreq) GetMui64I32() map[uint64]int32 {
	if x != nil {
		return x.Mui64I32
	}
	return nil
}

func (x *Helloreq) GetMui64Ui32() map[uint64]uint32 {
	if x != nil {
		return x.Mui64Ui32
	}
	return nil
}

func (x *Helloreq) GetMui64I64() map[uint64]int64 {
	if x != nil {
		return x.Mui64I64
	}
	return nil
}

func (x *Helloreq) GetMui64Ui64() map[uint64]uint64 {
	if x != nil {
		return x.Mui64Ui64
	}
	return nil
}

func (x *Helloreq) GetMui64Bs() map[uint64][]byte {
	if x != nil {
		return x.Mui64Bs
	}
	return nil
}

func (x *Helloreq) GetMui64Ss() map[uint64]string {
	if x != nil {
		return x.Mui64Ss
	}
	return nil
}

func (x *Helloreq) GetMui64F() map[uint64]float32 {
	if x != nil {
		return x.Mui64F
	}
	return nil
}

func (x *Helloreq) GetMui64D() map[uint64]float64 {
	if x != nil {
		return x.Mui64D
	}
	return nil
}

func (x *Helloreq) GetMui64E() map[uint64]TestEnum {
	if x != nil {
		return x.Mui64E
	}
	return nil
}

func (x *Helloreq) GetMui64M() map[uint64]*TestData {
	if x != nil {
		return x.Mui64M
	}
	return nil
}

func (x *Helloreq) GetMssI32() map[string]int32 {
	if x != nil {
		return x.MssI32
	}
	return nil
}

func (x *Helloreq) GetMssUi32() map[string]uint32 {
	if x != nil {
		return x.MssUi32
	}
	return nil
}

func (x *Helloreq) GetMssI64() map[string]int64 {
	if x != nil {
		return x.MssI64
	}
	return nil
}

func (x *Helloreq) GetMssUi64() map[string]uint64 {
	if x != nil {
		return x.MssUi64
	}
	return nil
}

func (x *Helloreq) GetMssBs() map[string][]byte {
	if x != nil {
		return x.MssBs
	}
	return nil
}

func (x *Helloreq) GetMssSs() map[string]string {
	if x != nil {
		return x.MssSs
	}
	return nil
}

func (x *Helloreq) GetMssF() map[string]float32 {
	if x != nil {
		return x.MssF
	}
	return nil
}

func (x *Helloreq) GetMssD() map[string]float64 {
	if x != nil {
		return x.MssD
	}
	return nil
}

func (x *Helloreq) GetMssE() map[string]TestEnum {
	if x != nil {
		return x.MssE
	}
	return nil
}

func (x *Helloreq) GetMssM() map[string]*TestData {
	if x != nil {
		return x.MssM
	}
	return nil
}

type Helloresp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Helloresp) Reset() {
	*x = Helloresp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Helloresp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Helloresp) ProtoMessage() {}

func (x *Helloresp) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Helloresp.ProtoReflect.Descriptor instead.
func (*Helloresp) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

type Worldreq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Worldreq) Reset() {
	*x = Worldreq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worldreq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worldreq) ProtoMessage() {}

func (x *Worldreq) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worldreq.ProtoReflect.Descriptor instead.
func (*Worldreq) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{3}
}

type Worldresp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Worldresp) Reset() {
	*x = Worldresp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worldresp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worldresp) ProtoMessage() {}

func (x *Worldresp) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worldresp.ProtoReflect.Descriptor instead.
func (*Worldresp) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{4}
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x70, 0x62, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0b,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x31, 0x0a, 0x08,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xc0, 0x91, 0x4e, 0x01, 0x52, 0x03, 0x69, 0x33, 0x32,
	0x12, 0x18, 0x0a, 0x04, 0x72, 0x69, 0x33, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04,
	0xc8, 0x91, 0x4e, 0x01, 0x52, 0x04, 0x72, 0x69, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x04, 0x75, 0x69,
	0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x90, 0x91, 0x4e, 0x01, 0x52, 0x04,
	0x75, 0x69, 0x33, 0x32, 0x12, 0x1e, 0x0a, 0x05, 0x72, 0x75, 0x69, 0x33, 0x32, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x08, 0x98, 0x90, 0x4e, 0x02, 0x98, 0x91, 0x4e, 0x01, 0x52, 0x05, 0x72,
	0x75, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x69, 0x36, 0x34, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x72, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69,
	0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x69, 0x36, 0x34, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x75, 0x69, 0x36, 0x34, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x75, 0x69, 0x36, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x62, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x72, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x72, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x66, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x02, 0x72, 0x66, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x02, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x01, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x01, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x72, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x02,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x01, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x01,
	0x6d, 0x12, 0x1f, 0x0a, 0x02, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x02,
	0x72, 0x6d, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x69, 0x33, 0x32, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x33, 0x32, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x69, 0x33, 0x32, 0x49, 0x33, 0x32, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69,
	0x33, 0x32, 0x5f, 0x75, 0x69, 0x33, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69,
	0x33, 0x32, 0x55, 0x69, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x69, 0x33,
	0x32, 0x55, 0x69, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x69, 0x33, 0x32, 0x5f, 0x69, 0x36,
	0x34, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x33, 0x32, 0x49, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x69, 0x33, 0x32, 0x49, 0x36, 0x34, 0x12, 0x39, 0x0a,
	0x09, 0x6d, 0x69, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x36, 0x34, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71,
	0x2e, 0x4d, 0x69, 0x33, 0x32, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x69, 0x33, 0x32, 0x55, 0x69, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x69, 0x33, 0x32,
	0x5f, 0x62, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x33, 0x32, 0x42, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x69, 0x33, 0x32, 0x42, 0x73, 0x12, 0x33, 0x0a,
	0x07, 0x6d, 0x69, 0x33, 0x32, 0x5f, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d,
	0x69, 0x33, 0x32, 0x53, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x69, 0x33, 0x32,
	0x53, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x33, 0x32, 0x5f, 0x66, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x65, 0x71, 0x2e, 0x4d, 0x69, 0x33, 0x32, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d,
	0x69, 0x33, 0x32, 0x46, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x33, 0x32, 0x5f, 0x64, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x33, 0x32, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x6d, 0x69, 0x33, 0x32, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x33, 0x32, 0x5f, 0x65,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x33, 0x32, 0x45, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6d, 0x69, 0x33, 0x32, 0x45, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x33, 0x32,
	0x5f, 0x6d, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x33, 0x32, 0x4d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x69, 0x33, 0x32, 0x4d, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x75,
	0x69, 0x33, 0x32, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75,
	0x69, 0x33, 0x32, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x75, 0x69,
	0x33, 0x32, 0x49, 0x33, 0x32, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x5f, 0x75,
	0x69, 0x33, 0x32, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x55,
	0x69, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x55,
	0x69, 0x33, 0x32, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x5f, 0x69, 0x36, 0x34,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x49, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x49, 0x36, 0x34, 0x12, 0x3c,
	0x0a, 0x0a, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x36, 0x34, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x55, 0x69, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x75, 0x69, 0x33, 0x32, 0x5f, 0x62, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d,
	0x75, 0x69, 0x33, 0x32, 0x42, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x75, 0x69,
	0x33, 0x32, 0x42, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x5f, 0x73, 0x73,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x53, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x53, 0x73, 0x12, 0x33, 0x0a, 0x07,
	0x6d, 0x75, 0x69, 0x33, 0x32, 0x5f, 0x66, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75,
	0x69, 0x33, 0x32, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x75, 0x69, 0x33, 0x32,
	0x46, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x5f, 0x64, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6d, 0x75, 0x69, 0x33, 0x32, 0x44, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x5f,
	0x65, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x45, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x45, 0x12, 0x33, 0x0a, 0x07, 0x6d,
	0x75, 0x69, 0x33, 0x32, 0x5f, 0x6d, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69,
	0x33, 0x32, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x75, 0x69, 0x33, 0x32, 0x4d,
	0x12, 0x36, 0x0a, 0x08, 0x6d, 0x69, 0x36, 0x34, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x29, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36, 0x34, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6d, 0x69, 0x36, 0x34, 0x49, 0x33, 0x32, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69, 0x36, 0x34,
	0x5f, 0x75, 0x69, 0x33, 0x32, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36, 0x34,
	0x55, 0x69, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x69, 0x36, 0x34, 0x55,
	0x69, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x69, 0x36, 0x34, 0x5f, 0x69, 0x36, 0x34, 0x18,
	0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36, 0x34, 0x49, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x69, 0x36, 0x34, 0x49, 0x36, 0x34, 0x12, 0x39, 0x0a, 0x09, 0x6d,
	0x69, 0x36, 0x34, 0x5f, 0x75, 0x69, 0x36, 0x34, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d,
	0x69, 0x36, 0x34, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x69,
	0x36, 0x34, 0x55, 0x69, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x69, 0x36, 0x34, 0x5f, 0x62,
	0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36, 0x34, 0x42, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x69, 0x36, 0x34, 0x42, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6d,
	0x69, 0x36, 0x34, 0x5f, 0x73, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36,
	0x34, 0x53, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x69, 0x36, 0x34, 0x53, 0x73,
	0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x36, 0x34, 0x5f, 0x66, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71,
	0x2e, 0x4d, 0x69, 0x36, 0x34, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x69, 0x36,
	0x34, 0x46, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x36, 0x34, 0x5f, 0x64, 0x18, 0x30, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36, 0x34, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d,
	0x69, 0x36, 0x34, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x36, 0x34, 0x5f, 0x65, 0x18, 0x31,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36, 0x34, 0x45, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x6d, 0x69, 0x36, 0x34, 0x45, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x69, 0x36, 0x34, 0x5f, 0x6d,
	0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x69, 0x36, 0x34, 0x4d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6d, 0x69, 0x36, 0x34, 0x4d, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x75, 0x69, 0x36,
	0x34, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x36,
	0x34, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x75, 0x69, 0x36, 0x34,
	0x49, 0x33, 0x32, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x5f, 0x75, 0x69, 0x33,
	0x32, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x55, 0x69, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x55, 0x69, 0x33,
	0x32, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x5f, 0x69, 0x36, 0x34, 0x18, 0x35,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x49, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x49, 0x36, 0x34, 0x12, 0x3c, 0x0a, 0x0a,
	0x6d, 0x75, 0x69, 0x36, 0x34, 0x5f, 0x75, 0x69, 0x36, 0x34, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71,
	0x2e, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x55, 0x69, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x75,
	0x69, 0x36, 0x34, 0x5f, 0x62, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69,
	0x36, 0x34, 0x42, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x75, 0x69, 0x36, 0x34,
	0x42, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x5f, 0x73, 0x73, 0x18, 0x38,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x53, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x53, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x75,
	0x69, 0x36, 0x34, 0x5f, 0x66, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x36,
	0x34, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x46, 0x12,
	0x33, 0x0a, 0x07, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x5f, 0x64, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71,
	0x2e, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x75,
	0x69, 0x36, 0x34, 0x44, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x5f, 0x65, 0x18,
	0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x45, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x45, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x75, 0x69,
	0x36, 0x34, 0x5f, 0x6d, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x75, 0x69, 0x36, 0x34,
	0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x75, 0x69, 0x36, 0x34, 0x4d, 0x12, 0x33,
	0x0a, 0x07, 0x6d, 0x73, 0x73, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e,
	0x4d, 0x73, 0x73, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x73, 0x73,
	0x49, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x33, 0x32, 0x18,
	0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73, 0x55, 0x69, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x73, 0x73, 0x55, 0x69, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x07, 0x6d,
	0x73, 0x73, 0x5f, 0x69, 0x36, 0x34, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73,
	0x49, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x73, 0x73, 0x49, 0x36, 0x34,
	0x12, 0x36, 0x0a, 0x08, 0x6d, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x36, 0x34, 0x18, 0x40, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6d, 0x73, 0x73, 0x55, 0x69, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x73, 0x73, 0x5f,
	0x62, 0x73, 0x18, 0x41, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73, 0x42, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x73, 0x73, 0x42, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x73,
	0x73, 0x5f, 0x73, 0x73, 0x18, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73, 0x53, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x73, 0x73, 0x53, 0x73, 0x12, 0x2d, 0x0a, 0x05,
	0x6d, 0x73, 0x73, 0x5f, 0x66, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73, 0x46,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x73, 0x73, 0x46, 0x12, 0x2d, 0x0a, 0x05, 0x6d,
	0x73, 0x73, 0x5f, 0x64, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73, 0x44, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x73, 0x73, 0x44, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x73,
	0x73, 0x5f, 0x65, 0x18, 0x45, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73, 0x45, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x73, 0x73, 0x45, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x73, 0x73,
	0x5f, 0x6d, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x73, 0x73, 0x4d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x6d, 0x73, 0x73, 0x4d, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x69, 0x33, 0x32,
	0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x69, 0x33, 0x32, 0x55, 0x69, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x69, 0x33, 0x32, 0x49, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x69, 0x33, 0x32, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x69,
	0x33, 0x32, 0x42, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x69, 0x33, 0x32, 0x53, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x69, 0x33, 0x32, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x69,
	0x33, 0x32, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0a, 0x4d, 0x69, 0x33, 0x32, 0x45, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49,
	0x0a, 0x0a, 0x4d, 0x69, 0x33, 0x32, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x75, 0x69,
	0x33, 0x32, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x55,
	0x69, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x49, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x42, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d,
	0x75, 0x69, 0x33, 0x32, 0x53, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x75, 0x69, 0x33, 0x32,
	0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x44, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a,
	0x0b, 0x4d, 0x75, 0x69, 0x33, 0x32, 0x45, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0b, 0x4d, 0x75, 0x69, 0x33,
	0x32, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x69, 0x36, 0x34, 0x49, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x69, 0x36, 0x34, 0x55, 0x69, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4d, 0x69, 0x36, 0x34, 0x49, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x69, 0x36,
	0x34, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x69, 0x36, 0x34, 0x42, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x69, 0x36, 0x34, 0x53, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a,
	0x4d, 0x69, 0x36, 0x34, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x69, 0x36, 0x34, 0x44, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x48, 0x0a, 0x0a, 0x4d, 0x69, 0x36, 0x34, 0x45, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0a, 0x4d, 0x69,
	0x36, 0x34, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x49, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x55, 0x69, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x49, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d,
	0x75, 0x69, 0x36, 0x34, 0x42, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x75, 0x69, 0x36, 0x34,
	0x53, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x46, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0b, 0x4d, 0x75, 0x69,
	0x36, 0x34, 0x45, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0b, 0x4d, 0x75, 0x69, 0x36, 0x34, 0x4d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x73, 0x73, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d,
	0x73, 0x73, 0x55, 0x69, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x73, 0x73, 0x49, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x73, 0x73, 0x55, 0x69, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38,
	0x0a, 0x0a, 0x4d, 0x73, 0x73, 0x42, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x73, 0x73, 0x53,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x73, 0x73, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d,
	0x73, 0x73, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x09, 0x4d, 0x73, 0x73, 0x45, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a,
	0x09, 0x4d, 0x73, 0x73, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0b, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x65, 0x73, 0x70, 0x22, 0x0a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x72, 0x65, 0x71,
	0x22, 0x0b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x72, 0x65, 0x73, 0x70, 0x2a, 0x20, 0x0a,
	0x08, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x55,
	0x4d, 0x41, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x55, 0x4d, 0x42, 0x10, 0x01, 0x32,
	0x54, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x12, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x65, 0x73,
	0x70, 0x22, 0x22, 0x8a, 0x9f, 0x49, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x92, 0x9f, 0x49, 0x05, 0x32,
	0x30, 0x30, 0x6d, 0x73, 0x9a, 0x9f, 0x49, 0x04, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x9f, 0x49, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x6e, 0x6a, 0x69, 0x65, 0x31, 0x39, 0x39, 0x32, 0x33,
	0x34, 0x2f, 0x43, 0x6f, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x72, 0x70, 0x63, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_test_proto_goTypes = []interface{}{
	(TestEnum)(0),     // 0: test.TestEnum
	(*TestData)(nil),  // 1: test.test_data
	(*Helloreq)(nil),  // 2: test.helloreq
	(*Helloresp)(nil), // 3: test.helloresp
	(*Worldreq)(nil),  // 4: test.worldreq
	(*Worldresp)(nil), // 5: test.worldresp
	nil,               // 6: test.helloreq.Mi32I32Entry
	nil,               // 7: test.helloreq.Mi32Ui32Entry
	nil,               // 8: test.helloreq.Mi32I64Entry
	nil,               // 9: test.helloreq.Mi32Ui64Entry
	nil,               // 10: test.helloreq.Mi32BsEntry
	nil,               // 11: test.helloreq.Mi32SsEntry
	nil,               // 12: test.helloreq.Mi32FEntry
	nil,               // 13: test.helloreq.Mi32DEntry
	nil,               // 14: test.helloreq.Mi32EEntry
	nil,               // 15: test.helloreq.Mi32MEntry
	nil,               // 16: test.helloreq.Mui32I32Entry
	nil,               // 17: test.helloreq.Mui32Ui32Entry
	nil,               // 18: test.helloreq.Mui32I64Entry
	nil,               // 19: test.helloreq.Mui32Ui64Entry
	nil,               // 20: test.helloreq.Mui32BsEntry
	nil,               // 21: test.helloreq.Mui32SsEntry
	nil,               // 22: test.helloreq.Mui32FEntry
	nil,               // 23: test.helloreq.Mui32DEntry
	nil,               // 24: test.helloreq.Mui32EEntry
	nil,               // 25: test.helloreq.Mui32MEntry
	nil,               // 26: test.helloreq.Mi64I32Entry
	nil,               // 27: test.helloreq.Mi64Ui32Entry
	nil,               // 28: test.helloreq.Mi64I64Entry
	nil,               // 29: test.helloreq.Mi64Ui64Entry
	nil,               // 30: test.helloreq.Mi64BsEntry
	nil,               // 31: test.helloreq.Mi64SsEntry
	nil,               // 32: test.helloreq.Mi64FEntry
	nil,               // 33: test.helloreq.Mi64DEntry
	nil,               // 34: test.helloreq.Mi64EEntry
	nil,               // 35: test.helloreq.Mi64MEntry
	nil,               // 36: test.helloreq.Mui64I32Entry
	nil,               // 37: test.helloreq.Mui64Ui32Entry
	nil,               // 38: test.helloreq.Mui64I64Entry
	nil,               // 39: test.helloreq.Mui64Ui64Entry
	nil,               // 40: test.helloreq.Mui64BsEntry
	nil,               // 41: test.helloreq.Mui64SsEntry
	nil,               // 42: test.helloreq.Mui64FEntry
	nil,               // 43: test.helloreq.Mui64DEntry
	nil,               // 44: test.helloreq.Mui64EEntry
	nil,               // 45: test.helloreq.Mui64MEntry
	nil,               // 46: test.helloreq.MssI32Entry
	nil,               // 47: test.helloreq.MssUi32Entry
	nil,               // 48: test.helloreq.MssI64Entry
	nil,               // 49: test.helloreq.MssUi64Entry
	nil,               // 50: test.helloreq.MssBsEntry
	nil,               // 51: test.helloreq.MssSsEntry
	nil,               // 52: test.helloreq.MssFEntry
	nil,               // 53: test.helloreq.MssDEntry
	nil,               // 54: test.helloreq.MssEEntry
	nil,               // 55: test.helloreq.MssMEntry
}
var file_test_proto_depIdxs = []int32{
	0,  // 0: test.helloreq.e:type_name -> test.TestEnum
	0,  // 1: test.helloreq.re:type_name -> test.TestEnum
	1,  // 2: test.helloreq.m:type_name -> test.test_data
	1,  // 3: test.helloreq.rm:type_name -> test.test_data
	6,  // 4: test.helloreq.mi32_i32:type_name -> test.helloreq.Mi32I32Entry
	7,  // 5: test.helloreq.mi32_ui32:type_name -> test.helloreq.Mi32Ui32Entry
	8,  // 6: test.helloreq.mi32_i64:type_name -> test.helloreq.Mi32I64Entry
	9,  // 7: test.helloreq.mi32_ui64:type_name -> test.helloreq.Mi32Ui64Entry
	10, // 8: test.helloreq.mi32_bs:type_name -> test.helloreq.Mi32BsEntry
	11, // 9: test.helloreq.mi32_ss:type_name -> test.helloreq.Mi32SsEntry
	12, // 10: test.helloreq.mi32_f:type_name -> test.helloreq.Mi32FEntry
	13, // 11: test.helloreq.mi32_d:type_name -> test.helloreq.Mi32DEntry
	14, // 12: test.helloreq.mi32_e:type_name -> test.helloreq.Mi32EEntry
	15, // 13: test.helloreq.mi32_m:type_name -> test.helloreq.Mi32MEntry
	16, // 14: test.helloreq.mui32_i32:type_name -> test.helloreq.Mui32I32Entry
	17, // 15: test.helloreq.mui32_ui32:type_name -> test.helloreq.Mui32Ui32Entry
	18, // 16: test.helloreq.mui32_i64:type_name -> test.helloreq.Mui32I64Entry
	19, // 17: test.helloreq.mui32_ui64:type_name -> test.helloreq.Mui32Ui64Entry
	20, // 18: test.helloreq.mui32_bs:type_name -> test.helloreq.Mui32BsEntry
	21, // 19: test.helloreq.mui32_ss:type_name -> test.helloreq.Mui32SsEntry
	22, // 20: test.helloreq.mui32_f:type_name -> test.helloreq.Mui32FEntry
	23, // 21: test.helloreq.mui32_d:type_name -> test.helloreq.Mui32DEntry
	24, // 22: test.helloreq.mui32_e:type_name -> test.helloreq.Mui32EEntry
	25, // 23: test.helloreq.mui32_m:type_name -> test.helloreq.Mui32MEntry
	26, // 24: test.helloreq.mi64_i32:type_name -> test.helloreq.Mi64I32Entry
	27, // 25: test.helloreq.mi64_ui32:type_name -> test.helloreq.Mi64Ui32Entry
	28, // 26: test.helloreq.mi64_i64:type_name -> test.helloreq.Mi64I64Entry
	29, // 27: test.helloreq.mi64_ui64:type_name -> test.helloreq.Mi64Ui64Entry
	30, // 28: test.helloreq.mi64_bs:type_name -> test.helloreq.Mi64BsEntry
	31, // 29: test.helloreq.mi64_ss:type_name -> test.helloreq.Mi64SsEntry
	32, // 30: test.helloreq.mi64_f:type_name -> test.helloreq.Mi64FEntry
	33, // 31: test.helloreq.mi64_d:type_name -> test.helloreq.Mi64DEntry
	34, // 32: test.helloreq.mi64_e:type_name -> test.helloreq.Mi64EEntry
	35, // 33: test.helloreq.mi64_m:type_name -> test.helloreq.Mi64MEntry
	36, // 34: test.helloreq.mui64_i32:type_name -> test.helloreq.Mui64I32Entry
	37, // 35: test.helloreq.mui64_ui32:type_name -> test.helloreq.Mui64Ui32Entry
	38, // 36: test.helloreq.mui64_i64:type_name -> test.helloreq.Mui64I64Entry
	39, // 37: test.helloreq.mui64_ui64:type_name -> test.helloreq.Mui64Ui64Entry
	40, // 38: test.helloreq.mui64_bs:type_name -> test.helloreq.Mui64BsEntry
	41, // 39: test.helloreq.mui64_ss:type_name -> test.helloreq.Mui64SsEntry
	42, // 40: test.helloreq.mui64_f:type_name -> test.helloreq.Mui64FEntry
	43, // 41: test.helloreq.mui64_d:type_name -> test.helloreq.Mui64DEntry
	44, // 42: test.helloreq.mui64_e:type_name -> test.helloreq.Mui64EEntry
	45, // 43: test.helloreq.mui64_m:type_name -> test.helloreq.Mui64MEntry
	46, // 44: test.helloreq.mss_i32:type_name -> test.helloreq.MssI32Entry
	47, // 45: test.helloreq.mss_ui32:type_name -> test.helloreq.MssUi32Entry
	48, // 46: test.helloreq.mss_i64:type_name -> test.helloreq.MssI64Entry
	49, // 47: test.helloreq.mss_ui64:type_name -> test.helloreq.MssUi64Entry
	50, // 48: test.helloreq.mss_bs:type_name -> test.helloreq.MssBsEntry
	51, // 49: test.helloreq.mss_ss:type_name -> test.helloreq.MssSsEntry
	52, // 50: test.helloreq.mss_f:type_name -> test.helloreq.MssFEntry
	53, // 51: test.helloreq.mss_d:type_name -> test.helloreq.MssDEntry
	54, // 52: test.helloreq.mss_e:type_name -> test.helloreq.MssEEntry
	55, // 53: test.helloreq.mss_m:type_name -> test.helloreq.MssMEntry
	0,  // 54: test.helloreq.Mi32EEntry.value:type_name -> test.TestEnum
	1,  // 55: test.helloreq.Mi32MEntry.value:type_name -> test.test_data
	0,  // 56: test.helloreq.Mui32EEntry.value:type_name -> test.TestEnum
	1,  // 57: test.helloreq.Mui32MEntry.value:type_name -> test.test_data
	0,  // 58: test.helloreq.Mi64EEntry.value:type_name -> test.TestEnum
	1,  // 59: test.helloreq.Mi64MEntry.value:type_name -> test.test_data
	0,  // 60: test.helloreq.Mui64EEntry.value:type_name -> test.TestEnum
	1,  // 61: test.helloreq.Mui64MEntry.value:type_name -> test.test_data
	0,  // 62: test.helloreq.MssEEntry.value:type_name -> test.TestEnum
	1,  // 63: test.helloreq.MssMEntry.value:type_name -> test.test_data
	2,  // 64: test.test.hello:input_type -> test.helloreq
	3,  // 65: test.test.hello:output_type -> test.helloresp
	65, // [65:66] is the sub-list for method output_type
	64, // [64:65] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Helloreq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Helloresp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worldreq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worldresp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
