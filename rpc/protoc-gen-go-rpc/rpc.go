package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"
	"time"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	timePackage    = protogen.GoImportPath("time")
	stringsPackage = protogen.GoImportPath("strings")
	bytesPackage   = protogen.GoImportPath("bytes")
	strconvPackage = protogen.GoImportPath("strconv")
	httpPackage    = protogen.GoImportPath("net/http")
	fmtPackage     = protogen.GoImportPath("fmt")
	ioutilPackage  = protogen.GoImportPath("io/ioutil")
	jsonPackage    = protogen.GoImportPath("encoding/json")
	protoPackage   = protogen.GoImportPath("github.com/golang/protobuf/proto")
	contextPackage = protogen.GoImportPath("context")
	rpcPackage     = protogen.GoImportPath("github.com/chenjie199234/Corelib/rpc")
	streamPackage  = protogen.GoImportPath("github.com/chenjie199234/Corelib/stream")
	commonPackage  = protogen.GoImportPath("github.com/chenjie199234/Corelib/common")
	bufpoolPackage = protogen.GoImportPath("github.com/chenjie199234/Corelib/bufpool")
)

// generateFile generates a _rpc.pb.go file containing rpc service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_rpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-rpc. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the rpc service definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}
func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		return
	}
	countUndeprecatedMethod := 0
	for _, method := range service.Methods {
		if !method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			countUndeprecatedMethod++
		}
	}
	if countUndeprecatedMethod == 0 {
		return
	}
	//Router path
	for _, method := range service.Methods {
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			continue
		}
		pathname := "RpcPath" + service.GoName + method.GoName
		pathurl := "/" + *file.Proto.Package + "." + service.GoName + "/" + method.GoName
		g.P("var ", pathname, "=", strconv.Quote(pathurl))
	}

	// Client interface.
	clientName := service.GoName + "RpcClient"
	lowclientName := strings.ToLower(clientName[:1]) + clientName[1:]

	g.P("// ", clientName, " is the client API for ", service.GoName, " service.")

	g.P("type ", clientName, " interface {")
	for _, method := range service.Methods {
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			continue
		}
		g.P(method.Comments.Leading,
			method.GoName, "(", g.QualifiedGoIdent(contextPackage.Ident("Context")),
			",*", g.QualifiedGoIdent(method.Input.GoIdent), ")(*",
			g.QualifiedGoIdent(method.Output.GoIdent), ",error)")
	}
	g.P("}")
	g.P()
	g.P("type ", lowclientName, " struct{")
	g.P("cc *", g.QualifiedGoIdent(rpcPackage.Ident("RpcClient")))
	g.P("}")
	p1 := "c *" + g.QualifiedGoIdent(streamPackage.Ident("InstanceConfig"))
	p2 := "verifydata []byte"
	p3 := "globaltimeout " + g.QualifiedGoIdent(timePackage.Ident("Duration"))
	p4 := "picker " + g.QualifiedGoIdent(rpcPackage.Ident("PickHandler"))
	p5 := "discover " + g.QualifiedGoIdent(rpcPackage.Ident("DiscoveryHandler"))
	g.P("//has race,will only return the first's call's client,the config will use the first call's config")
	g.P("func New", clientName, "(", p1, ",", p2, ",", p3, ",", p4, ",", p5, ")", clientName, "{")
	g.P("return &", lowclientName, "{cc:", g.QualifiedGoIdent(rpcPackage.Ident("NewRpcClient")), "(c,verifydata,\"", *file.Proto.Package, "\",globaltimeout,picker,discover)}")
	g.P("}")
	g.P()
	// Client handler
	for _, method := range service.Methods {
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			continue
		}
		pathname := "RpcPath" + service.GoName + method.GoName
		p1 := "ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
		p2 := "req *" + g.QualifiedGoIdent(method.Input.GoIdent)
		freturn := "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ",error)"
		g.P("func (c *", lowclientName, ")", method.GoName, "(", p1, ",", p2, ")", freturn, "{")
		g.P("if req == nil {")
		g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
		g.P("}")
		r, e := parseMethodComment(string(method.Comments.Trailing))
		if e != nil {
			panic(e)
		}
		if len(method.Input.Fields) > 0 && haschecker(method.Input) {
			checker("req.", method.Input, g, false)
		}
		g.P("reqd,_:=", g.QualifiedGoIdent(protoPackage.Ident("Marshal")), "(req)")
		g.P("callback,e:=c.cc.Call(ctx,", strconv.FormatInt(int64(r.timeout), 10), ",", pathname, ",reqd)")
		g.P("if e != nil {")
		g.P("return nil, e")
		g.P("}")
		g.P("resp := new(", g.QualifiedGoIdent(method.Output.GoIdent), ")")
		g.P("if e:=", g.QualifiedGoIdent(protoPackage.Ident("Unmarshal")), "(callback,resp);e!=nil{")
		g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRRESPONSE")))
		g.P("}")
		g.P("return resp, nil")
		g.P("}")
	}

	// Server interface.
	serverName := service.GoName + "RpcServer"

	g.P("// ", serverName, " is the server API for ", service.GoName, " service.")
	g.P("type ", serverName, " interface {")
	for _, method := range service.Methods {
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			continue
		}
		g.P(method.Comments.Leading,
			method.GoName, "(", g.QualifiedGoIdent(contextPackage.Ident("Context")),
			",*", g.QualifiedGoIdent(method.Input.GoIdent), ")(*",
			g.QualifiedGoIdent(method.Output.GoIdent), ",error)")
	}
	g.P("}")
	g.P()

	// Server handler
	for _, method := range service.Methods {
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			continue
		}
		fname := "func _" + service.GoName + "_" + method.GoName + "_RpcHandler"
		p1 := "handler func (" + g.QualifiedGoIdent(contextPackage.Ident("Context")) + ",*" + g.QualifiedGoIdent(method.Input.GoIdent) + ")(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ",error)"
		freturn := g.QualifiedGoIdent(rpcPackage.Ident("OutsideHandler"))
		g.P(fname, "(", p1, ")", freturn, "{")
		g.P("return func(ctx *"+g.QualifiedGoIdent(rpcPackage.Ident("Context")), "){")
		g.P("req:=new(", g.QualifiedGoIdent(method.Input.GoIdent), ")")
		g.P("if e:=", g.QualifiedGoIdent(protoPackage.Ident("Unmarshal")), "(ctx.GetBody(),req);e!=nil{")
		g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
		g.P("return")
		g.P("}")
		if haschecker(method.Input) {
			checker("req.", method.Input, g, true)
		}
		g.P("resp,e:=handler(ctx,req)")
		g.P("if e!=nil{")
		g.P("ctx.Abort(e)")
		g.P("return")
		g.P("}")
		g.P("if resp == nil{")
		g.P("resp = new(", g.QualifiedGoIdent(method.Output.GoIdent), ")")
		g.P("}")
		g.P("respd,_:=", g.QualifiedGoIdent(protoPackage.Ident("Marshal")), "(resp)")
		g.P("ctx.Write(respd)")
		g.P("}")
		g.P("}")
	}

	//Server Register
	g.P("func Register", serverName, "(engine *", g.QualifiedGoIdent(rpcPackage.Ident("RpcServer")), ",svc ", serverName, ",allmids map[string]", g.QualifiedGoIdent(rpcPackage.Ident("OutsideHandler")), "){")
	g.P("//avoid lint")
	g.P("_=allmids")
	for _, method := range service.Methods {
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			continue
		}
		r, e := parseMethodComment(string(method.Comments.Trailing))
		if e != nil {
			panic(e)
		}
		fname := "_" + service.GoName + "_" + method.GoName + "_RpcHandler(svc." + method.GoName + ")"
		pathname := "RpcPath" + service.GoName + method.GoName
		if len(r.mids) > 0 {
			g.P("{")
			str := ""
			for _, mid := range r.mids {
				str += ","
				str += strconv.Quote(mid)
			}
			str = str[1:]
			g.P("requiredMids:=[]string{", str, "}")
			g.P("mids:=make([]", g.QualifiedGoIdent(rpcPackage.Ident("OutsideHandler")), ",0)")
			g.P("for _,v:=range requiredMids{")
			g.P("if mid,ok:=allmids[v];ok{")
			g.P("mids = append(mids,mid)")
			g.P("}")
			g.P("}")
			g.P("mids = append(mids,", fname, ")")
			g.P("engine.RegisterHandler(", pathname, ",", strconv.FormatInt(int64(r.timeout), 10), ",mids...)")
			g.P("}")
		} else {
			g.P("engine.RegisterHandler(", pathname, ",", strconv.FormatInt(int64(r.timeout), 10), ",", fname, ")")
		}
	}
	g.P("}")
}

func checker(prefix string, message *protogen.Message, g *protogen.GeneratedFile, server bool) {
	for _, field := range message.Fields {
		if field.Oneof != nil {
			panic("don't use oneof in proto,protoc plugin can't support!")
		}
		r, e := parseFieldComment(string(field.Comments.Trailing))
		if e != nil {
			panic(e)
		}
		switch field.Desc.Kind() {
		case protoreflect.BoolKind:
			//bool or []bool
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.Int32Kind:
			fallthrough
		case protoreflect.Sint32Kind:
			fallthrough
		case protoreflect.Sfixed32Kind:
			//int32 or []int32
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gt != nil {
					g.P("//gt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(int64(v),10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(int64(v),10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				if r.gt != nil {
					g.P("//gt check")
					g.P("if float64(", prefix, field.GoName, ")<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("if float64(", prefix, field.GoName, ")<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("if float64(", prefix, field.GoName, ")>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("if float64(", prefix, field.GoName, ")>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(int64(", prefix, field.GoName, "),10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(int64(", prefix, field.GoName, "),10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.Uint32Kind:
			fallthrough
		case protoreflect.Fixed32Kind:
			//uint32 or []uint32
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gt != nil {
					g.P("//gt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatUint")), "(uint64(v),10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatUint")), "(uint64(v),10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				if r.gt != nil {
					g.P("//gt check")
					g.P("if float64(", prefix, field.GoName, ")<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("if float64(", prefix, field.GoName, ")<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("if float64(", prefix, field.GoName, ")>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("if float64(", prefix, field.GoName, ")>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatUint")), "(uint64(", prefix, field.GoName, "),10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatUint")), "(uint64(", prefix, field.GoName, "),10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.Int64Kind:
			fallthrough
		case protoreflect.Sint64Kind:
			fallthrough
		case protoreflect.Sfixed64Kind:
			//int64 or []int64
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gt != nil {
					g.P("//gt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(v,10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(v,10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				if r.gt != nil {
					g.P("//gt check")
					g.P("if float64(", prefix, field.GoName, ")<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("if float64(", prefix, field.GoName, ")<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("if float64(", prefix, field.GoName, ")>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("if float64(", prefix, field.GoName, ")>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(", prefix, field.GoName, ",10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(", prefix, field.GoName, ",10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.Uint64Kind:
			fallthrough
		case protoreflect.Fixed64Kind:
			//uint64 or []uint64
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gt != nil {
					g.P("//gt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatUint")), "(v,10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatUint")), "(v,10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				if r.gt != nil {
					g.P("//gt check")
					g.P("if float64(", prefix, field.GoName, ")<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("if float64(", prefix, field.GoName, ")<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("if float64(", prefix, field.GoName, ")>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("if float64(", prefix, field.GoName, ")>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatUint")), "(", prefix, field.GoName, ",10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatUint")), "(", prefix, field.GoName, ",10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.FloatKind:
			//float32 or []float32
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gt != nil {
					g.P("//gt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatFloat")), "(float64(v),'f',-1,32);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatFloat")), "(float64(v),'f',-1,32);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				if r.gt != nil {
					g.P("//gt check")
					g.P("if float64(", prefix, field.GoName, ")<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("if float64(", prefix, field.GoName, ")<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("if float64(", prefix, field.GoName, ")>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("if float64(", prefix, field.GoName, ")>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatFloat")), "(", prefix, field.GoName, ",'f',-1,32);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatFloat")), "(", prefix, field.GoName, ",'f',-1,32);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.DoubleKind:
			//float64
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gt != nil {
					g.P("//gt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if v<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if v<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if v>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if v>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatFloat")), "(v,'f',-1,64);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatFloat")), "(v,'f',-1,64);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				if r.gt != nil {
					g.P("//gt check")
					g.P("if ", prefix, field.GoName, "<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("if ", prefix, field.GoName, "<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("if ", prefix, field.GoName, ">=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("if ", prefix, field.GoName, ">", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatFloat")), "(", prefix, field.GoName, ",'f',-1,64);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatFloat")), "(", prefix, field.GoName, ",'f',-1,64);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.StringKind:
			//string or []string
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if ")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("v!=", strconv.Quote(v), "||")
						} else {
							g.P("v!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if ")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("v==", strconv.Quote(v), "||")
						} else {
							g.P("v==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if ")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P(prefix, field.GoName, "!=", strconv.Quote(v), "||")
						} else {
							g.P(prefix, field.GoName, "!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if ")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P(prefix, field.GoName, "==", strconv.Quote(v), "||")
						} else {
							g.P(prefix, field.GoName, "==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.BytesKind:
			//[]byte or [][]byte
			if field.Desc.IsList() {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if ")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("string(v)!=", strconv.Quote(v), "||")
						} else {
							g.P("string(v)!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if ")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("string(v)==", strconv.Quote(v), "||")
						} else {
							g.P("string(v)==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if ")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("string(", prefix, field.GoName, ")!=", strconv.Quote(v), "||")
						} else {
							g.P("string(", prefix, field.GoName, ")!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if ")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("string(", prefix, field.GoName, ")==", strconv.Quote(v), "||")
						} else {
							g.P("string(", prefix, field.GoName, ")==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.EnumKind:
			//enum or []enum
			if field.Desc.IsList() {
				g.P("//enum check")
				g.P("for _, v := range ", prefix, field.GoName, "{")
				g.P("if _, ok := ", g.QualifiedGoIdent(field.Enum.GoIdent), "_name[int32(v)]; !ok {")
				if server {
					g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
					g.P("return")
				} else {
					g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
				}
				g.P("}")
				g.P("}")
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gt != nil {
					g.P("//gt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if float64(v)>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(int64(v),10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("for _,v:=range ", prefix, field.GoName, "{")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(int64(v),10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
			} else {
				g.P("//enum check")
				g.P("if _,ok:=", g.QualifiedGoIdent(field.Enum.GoIdent), "_name[int32(", prefix, field.GoName, ")];!ok{")
				if server {
					g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
					g.P("return")
				} else {
					g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
				}
				g.P("}")
				if r.gt != nil {
					g.P("//gt check")
					g.P("if float64(", prefix, field.GoName, ")<=", *r.gt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.gte != nil {
					g.P("//gte check")
					g.P("if float64(", prefix, field.GoName, ")<", *r.gte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lt != nil {
					g.P("//lt check")
					g.P("if float64(", prefix, field.GoName, ")>=", *r.lt, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.lte != nil {
					g.P("//lte check")
					g.P("if float64(", prefix, field.GoName, ")>", *r.lte, "{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.in != nil {
					g.P("//in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(int64(", prefix, field.GoName, "),10);")
					for i, v := range r.in {
						if i != len(r.in)-1 {
							g.P("vv!=", strconv.Quote(v), "||")
						} else {
							g.P("vv!=", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if r.notin != nil {
					g.P("//not in check")
					g.P("if vv:=", g.QualifiedGoIdent(strconvPackage.Ident("FormatInt")), "(int64(", prefix, field.GoName, "),10);")
					for i, v := range r.notin {
						if i != len(r.notin)-1 {
							g.P("vv==", strconv.Quote(v), "||")
						} else {
							g.P("vv==", strconv.Quote(v), "{")
						}
					}
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
			}
		case protoreflect.MessageKind:
			//message or []message or map
			if field.Desc.IsMap() {
				//map
				if field.Desc.MapValue().Kind() == protoreflect.EnumKind {
					g.P("//enum check")
					g.P("for _, v := range ", prefix, field.GoName, "{")
					g.P("if _, ok := ", g.QualifiedGoIdent(field.Message.Fields[1].Enum.GoIdent), "_name[int32(v)]; !ok {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
					g.P("}")
				}
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if field.Desc.MapValue().Kind() == protoreflect.MessageKind {
					if haschecker(field.Message.Fields[1].Message) {
						g.P("for k:=range ", prefix, field.GoName, "{")
						g.P("if ", prefix, field.GoName, "[k]!=nil{")
						checker(prefix+field.GoName+"[k].", field.Message.Fields[1].Message, g, server)
						g.P("}")
						g.P("}")
					}
				}
			} else if field.Desc.IsList() {
				//[]message
				if r.notempty {
					g.P("//empty check")
					g.P("if len(", prefix, field.GoName, ") == 0 {")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if haschecker(field.Message) {
					g.P("for i:=range ", prefix, field.GoName, "{")
					g.P("if ", prefix, field.GoName, "[i]!=nil{")
					checker(prefix+field.GoName+"[i].", field.Message, g, server)
					g.P("}")
					g.P("}")
				}
			} else {
				//message
				if r.notempty {
					g.P("//empty check")
					g.P("if ", prefix, field.GoName, "==nil{")
					if server {
						g.P("ctx.Abort(", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")), ")")
						g.P("return")
					} else {
						g.P("return nil,", g.QualifiedGoIdent(rpcPackage.Ident("ERRREQUEST")))
					}
					g.P("}")
				}
				if haschecker(field.Message) {
					g.P("if ", prefix, field.GoName, "!=nil{")
					checker(prefix+field.GoName+".", field.Message, g, server)
					g.P("}")
				}
			}
		default:
			panic("unknown field type")
		}
	}
}
func haschecker(message *protogen.Message) bool {
	for _, field := range message.Fields {
		if field.Oneof != nil {
			panic("don't use oneof in proto,protoc plugin can't support!")
		}
		r, e := parseFieldComment(string(field.Comments.Trailing))
		if e != nil {
			panic(e)
		}
		kind := field.Desc.Kind()
		if kind == protoreflect.EnumKind || (field.Desc.IsMap() && field.Desc.MapValue().Kind() == protoreflect.EnumKind) {
			return true
		}
		//empty will only check on bytes,string,list,map,struct
		if r.notempty && (field.Desc.Kind() == protoreflect.MessageKind || field.Desc.Kind() == protoreflect.StringKind || field.Desc.Kind() == protoreflect.BytesKind || field.Desc.IsList() || field.Desc.IsMap()) {
			return true
		}
		//in and not in will not check on struct,map,bool kind fields
		if (r.in != nil || r.notin != nil) && kind != protoreflect.BoolKind && kind != protoreflect.MessageKind && kind != protoreflect.GroupKind {
			return true
		}
		//gt,gte,lt,lte will only check on number kind fields
		if (r.gt != nil || r.lt != nil || r.gte != nil || r.lte != nil) && kind != protoreflect.MessageKind && kind != protoreflect.BytesKind && kind != protoreflect.StringKind && kind != protoreflect.BoolKind && kind != protoreflect.GroupKind {
			return true
		}
		if kind == protoreflect.MessageKind {
			if field.Desc.IsList() || !field.Desc.IsMap() {
				if haschecker(field.Message) {
					return true
				}
			} else if field.Desc.MapValue().Kind() == protoreflect.MessageKind {
				if haschecker(field.Message.Fields[1].Message) {
					return true
				}
			}
		}
	}
	return false
}

type methodComment struct {
	method  string
	timeout time.Duration
	mids    []string
}

func parseMethodComment(data string) (*methodComment, error) {
	var e error
	r := &methodComment{
		method:  http.MethodGet,
		timeout: 0,
		mids:    make([]string, 0),
	}
	if len(strings.TrimSpace(data)) == 0 {
		return r, nil
	}
	strs := strings.Split(strings.TrimSpace(data), "|")
	for _, str := range strs {
		substrs := strings.Split(str, ":")
		if len(substrs) != 2 {
			return nil, fmt.Errorf("rpc comment format error")
		}
		if len(strings.TrimSpace(substrs[1])) == 0 {
			continue
		}
		switch strings.ToLower(strings.TrimSpace(substrs[0])) {
		case "method":
			r.method = strings.ToUpper(strings.TrimSpace(substrs[1]))
			switch r.method {
			case http.MethodGet:
			case http.MethodDelete:
			case http.MethodPost:
			case http.MethodPut:
			case http.MethodPatch:
			default:
				return nil, fmt.Errorf("rpc unsupported http method comment,supported:get,post")
			}
		case "timeout":
			if r.timeout, e = time.ParseDuration(strings.TrimSpace(substrs[1])); e != nil {
				return nil, fmt.Errorf("rpc timeout comment format error,example:100ms,1s,1m,1h")
			}
		case "mids":
			r.mids = make([]string, 0)
			if e = json.Unmarshal([]byte(strings.TrimSpace(substrs[1])), &r.mids); e != nil {
				return nil, fmt.Errorf("rpc mids comment format error,example:[\"firstmid\",\"secondmid\"]")
			}
		default:
			return nil, fmt.Errorf("rpc unknown comment")
		}
	}
	return r, nil
}

type fieldComment struct {
	header   bool
	notempty bool
	gt       *float64
	lt       *float64
	gte      *float64
	lte      *float64
	in       []string
	notin    []string
}

func parseFieldComment(data string) (*fieldComment, error) {
	r := &fieldComment{}
	if len(strings.TrimSpace(data)) == 0 {
		return r, nil
	}
	strs := strings.Split(strings.TrimSpace(data), "|")
	for _, str := range strs {
		substrs := strings.Split(str, ":")
		if len(substrs) != 2 {
			return nil, fmt.Errorf("field comment format error")
		}
		if len(strings.TrimSpace(substrs[1])) == 0 {
			continue
		}
		switch strings.ToLower(substrs[0]) {
		case "header":
			tmp := strings.ToLower(strings.TrimSpace(substrs[1]))
			if tmp != "true" {
				return nil, fmt.Errorf("field header comment format error,support:true")
			}
			r.header = true
		case "empty":
			tmp := strings.ToLower(strings.TrimSpace(substrs[1]))
			if tmp != "false" {
				return nil, fmt.Errorf("field empty comment format error,suppoer:false")
			}
			r.notempty = true
		case "gt":
			temp, e := strconv.ParseFloat(substrs[1], 64)
			if e != nil {
				return nil, fmt.Errorf("field gt comment format error,example:123.1,9999")
			}
			r.gt = &temp
		case "gte":
			temp, e := strconv.ParseFloat(substrs[1], 64)
			if e != nil {
				return nil, fmt.Errorf("field gte comment format error,example:123.1,9999")
			}
			r.gte = &temp
		case "lt":
			temp, e := strconv.ParseFloat(substrs[1], 64)
			if e != nil {
				return nil, fmt.Errorf("field lt comment format error,example:123.1,9999")
			}
			r.lt = &temp
		case "lte":
			temp, e := strconv.ParseFloat(substrs[1], 64)
			if e != nil {
				return nil, fmt.Errorf("field lte comment format error,example:123.1,9999")
			}
			r.lte = &temp
		case "in":
			in := make([]string, 0)
			if e := json.Unmarshal([]byte(strings.TrimSpace(substrs[1])), &in); e != nil {
				return nil, fmt.Errorf("field in comment format error,example:[\"1\",\"abc\",\"3.14\"]")
			}
			r.in = in
		case "notin":
			notin := make([]string, 0)
			if e := json.Unmarshal([]byte(strings.TrimSpace(substrs[1])), &notin); e != nil {
				return nil, fmt.Errorf("field notin comment format error,example:[\"1\",\"abc\",\"3.14\"]")
			}
			r.notin = notin
		default:
			return nil, fmt.Errorf("field unknown comment")
		}
	}
	if r.gte != nil && r.gt != nil {
		if *r.gt >= *r.gte {
			r.gte = nil
		} else {
			r.gt = nil
		}
	}
	if r.lte != nil && r.lt != nil {
		if *r.lt <= *r.lte {
			r.lte = nil
		} else {
			r.lt = nil
		}
	}
	if r.gte != nil {
		if r.lte != nil && *r.gte > *r.lte {
			return nil, fmt.Errorf("field comment format error,gte > lte")
		}
		if r.lt != nil && *r.gte >= *r.lt {
			return nil, fmt.Errorf("field comment format error,gte >= lt")
		}
	}
	if r.gt != nil {
		if r.lte != nil && *r.gt >= *r.lte {
			return nil, fmt.Errorf("field comment format error,gt >= lte")
		}
		if r.lt != nil && *r.gt >= *r.lt {
			return nil, fmt.Errorf("field comment format error,gt >= lt")
		}
	}
	if r.in != nil && r.notin != nil {
		return nil, fmt.Errorf("field comment form error,in,notin can only set one")
	}
	if len(r.in) == 0 {
		r.in = nil
	}
	if len(r.notin) == 0 {
		r.notin = nil
	}
	return r, nil
}
